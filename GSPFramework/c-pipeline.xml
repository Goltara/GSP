<pipeline>
    <namespace demo="fr.prima.gsp.demo"/>

    <m id="root" type="demo:Grabber"/>
    <m id="cons" type="demo:ConsoleOutput"/>
    <m id="fps"  type="c:demo.FpsEstimator" samples="6"/>
    <m id="fps2" type="c:demo.FpsEstimator" samples="4"/>
    <m id="mul"  type="c:demo.Mul" by="2"/>
    <m id="mul2" type="demo:Mul" by="30"/>

    <m id="div"  type="c:demo.Div" by="5"/>
    <m id="div2" type="c:demo.Div2" by="2"/>
    <m id="tostring" type="demo:CharPointerToString"/>
    
    <!-- idea:
         if many converters are used, we can propose some factory notation, e.g.
         <factory id="tostring" type="demo:CharPointerToString"/>
         then, each time "tostring" is used, a new anonymous instance of module (of type demo:CharPointerToString) will be created

<!-- test with images
    <m id="show" type="java:fr.prima.gsp.demo.CVShowIplImage"/>
    <m id="tr" type="java:fr.prima.gsp.demo.GetIPLData"/>
    <m id="ipl" type="c:demo.TestImage"/>

    <c from="root@imageOutput" to="tr@input"/>
    <c from="tr@output" to="ipl@input"/>
    <c from="tr@outputImage" to="show@input"/>
-->

    <c chain="root@tick - #fps#string - cons@info"/>
    <!-- replaces: (as input/output are optionnal
    <chain chain="root#tick - input#fps#string - info#cons"/>
    -->
    <!-- replaces: (without the shortcut)
    <c from="root@tick" to="fps@input"/>
    <c from="fps@string" to="cons@info"/>
    -->


    <c chain="fps@string - #fps2#float - #mul#float - #mul2#float - #div#float - #div2#string - tostring - cons@error"/>
    <!--
    <c from="fps@string"  to="fps2@input"/>
    <c from="fps2@float"  to="mul@input"/>
    <c from="mul@float"   to="mul2@input"/>
    <c from="mul2@float"  to="div@input"/>
    <c from="div@float"   to="div2@input"/>
    <c from="div2@string" to="tostring@input"/>
    <c fnrom="tostring@output" to="cons@error"/>
-->
    
</pipeline>

