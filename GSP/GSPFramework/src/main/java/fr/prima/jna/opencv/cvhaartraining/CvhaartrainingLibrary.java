package fr.prima.jna.opencv.cvhaartraining;
/**
 * JNA Wrapper for library <b>cvhaartraining</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CvhaartrainingLibrary extends com.sun.jna.Library {
	public static final java.lang.String JNA_LIBRARY_NAME = com.ochafik.lang.jnaerator.runtime.LibraryExtractor.getLibraryPath("cvhaartraining", true, fr.prima.jna.opencv.cvhaartraining.CvhaartrainingLibrary.class);
	public static final com.sun.jna.NativeLibrary JNA_NATIVE_LIB = com.sun.jna.NativeLibrary.getInstance(fr.prima.jna.opencv.cvhaartraining.CvhaartrainingLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final fr.prima.jna.opencv.cvhaartraining.CvhaartrainingLibrary INSTANCE = (fr.prima.jna.opencv.cvhaartraining.CvhaartrainingLibrary)com.sun.jna.Native.loadLibrary(fr.prima.jna.opencv.cvhaartraining.CvhaartrainingLibrary.JNA_LIBRARY_NAME, fr.prima.jna.opencv.cvhaartraining.CvhaartrainingLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	/// <i>native declaration : cvhaartraining.h</i>
	public static final int CV_RANDOM_INVERT = 2147483647;
	/**
	 * Original signature : <code>void cvCreateTrainingSamples(const char*, const char*, int, int, const char*, int, int, int, double, double, double, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:77</i><br>
	 * @deprecated use the safer methods {@link #cvCreateTrainingSamples(java.lang.String, java.lang.String, int, int, java.lang.String, int, int, int, double, double, double, int, int, int)} and {@link #cvCreateTrainingSamples(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, com.sun.jna.Pointer, int, int, int, double, double, double, int, int, int)} instead
	 */
	@java.lang.Deprecated
	void cvCreateTrainingSamples(com.sun.jna.Pointer filename, com.sun.jna.Pointer imgfilename, int bgcolor, int bgthreshold, com.sun.jna.Pointer bgfilename, int count, int invert, int maxintensitydev, double maxxangle, double maxyangle, double maxzangle, int showsamples, int winwidth, int winheight);
	/**
	 * Original signature : <code>void cvCreateTrainingSamples(const char*, const char*, int, int, const char*, int, int, int, double, double, double, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:77</i>
	 */
	void cvCreateTrainingSamples(java.lang.String filename, java.lang.String imgfilename, int bgcolor, int bgthreshold, java.lang.String bgfilename, int count, int invert, int maxintensitydev, double maxxangle, double maxyangle, double maxzangle, int showsamples, int winwidth, int winheight);
	/**
	 * Original signature : <code>void cvCreateTestSamples(const char*, const char*, int, int, const char*, int, int, int, double, double, double, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:87</i><br>
	 * @deprecated use the safer methods {@link #cvCreateTestSamples(java.lang.String, java.lang.String, int, int, java.lang.String, int, int, int, double, double, double, int, int, int)} and {@link #cvCreateTestSamples(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, com.sun.jna.Pointer, int, int, int, double, double, double, int, int, int)} instead
	 */
	@java.lang.Deprecated
	void cvCreateTestSamples(com.sun.jna.Pointer infoname, com.sun.jna.Pointer imgfilename, int bgcolor, int bgthreshold, com.sun.jna.Pointer bgfilename, int count, int invert, int maxintensitydev, double maxxangle, double maxyangle, double maxzangle, int showsamples, int winwidth, int winheight);
	/**
	 * Original signature : <code>void cvCreateTestSamples(const char*, const char*, int, int, const char*, int, int, int, double, double, double, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:87</i>
	 */
	void cvCreateTestSamples(java.lang.String infoname, java.lang.String imgfilename, int bgcolor, int bgthreshold, java.lang.String bgfilename, int count, int invert, int maxintensitydev, double maxxangle, double maxyangle, double maxzangle, int showsamples, int winwidth, int winheight);
	/**
	 * cvCreateTrainingSamplesFromInfo<br>
	 * * Create training samples from a set of marked up images and store them into .vec file<br>
	 * infoname    - file in which marked up image descriptions are stored<br>
	 * num         - desired number of samples<br>
	 * showsamples - if not 0 samples will be shown<br>
	 * winwidth    - sample width<br>
	 * winheight   - sample height<br>
	 * <br>
	 * Return number of successfully created samples<br>
	 * Original signature : <code>int cvCreateTrainingSamplesFromInfo(const char*, const char*, int, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:107</i><br>
	 * @deprecated use the safer methods {@link #cvCreateTrainingSamplesFromInfo(java.lang.String, java.lang.String, int, int, int, int)} and {@link #cvCreateTrainingSamplesFromInfo(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, int, int)} instead
	 */
	@java.lang.Deprecated
	int cvCreateTrainingSamplesFromInfo(com.sun.jna.Pointer infoname, com.sun.jna.Pointer vecfilename, int num, int showsamples, int winwidth, int winheight);
	/**
	 * cvCreateTrainingSamplesFromInfo<br>
	 * * Create training samples from a set of marked up images and store them into .vec file<br>
	 * infoname    - file in which marked up image descriptions are stored<br>
	 * num         - desired number of samples<br>
	 * showsamples - if not 0 samples will be shown<br>
	 * winwidth    - sample width<br>
	 * winheight   - sample height<br>
	 * <br>
	 * Return number of successfully created samples<br>
	 * Original signature : <code>int cvCreateTrainingSamplesFromInfo(const char*, const char*, int, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:107</i>
	 */
	int cvCreateTrainingSamplesFromInfo(java.lang.String infoname, java.lang.String vecfilename, int num, int showsamples, int winwidth, int winheight);
	/**
	 * cvShowVecSamples<br>
	 * * Shows samples stored in .vec file<br>
	 * * filename<br>
	 *   .vec file name<br>
	 * winwidth<br>
	 *   sample width<br>
	 * winheight<br>
	 *   sample height<br>
	 * scale<br>
	 *   the scale each sample is adjusted to<br>
	 * Original signature : <code>void cvShowVecSamples(const char*, int, int, double)</code><br>
	 * <i>native declaration : cvhaartraining.h:126</i><br>
	 * @deprecated use the safer methods {@link #cvShowVecSamples(java.lang.String, int, int, double)} and {@link #cvShowVecSamples(com.sun.jna.Pointer, int, int, double)} instead
	 */
	@java.lang.Deprecated
	void cvShowVecSamples(com.sun.jna.Pointer filename, int winwidth, int winheight, double scale);
	/**
	 * cvShowVecSamples<br>
	 * * Shows samples stored in .vec file<br>
	 * * filename<br>
	 *   .vec file name<br>
	 * winwidth<br>
	 *   sample width<br>
	 * winheight<br>
	 *   sample height<br>
	 * scale<br>
	 *   the scale each sample is adjusted to<br>
	 * Original signature : <code>void cvShowVecSamples(const char*, int, int, double)</code><br>
	 * <i>native declaration : cvhaartraining.h:126</i>
	 */
	void cvShowVecSamples(java.lang.String filename, int winwidth, int winheight, double scale);
	/**
	 * cvCreateCascadeClassifier<br>
	 * * Create cascade classifier<br>
	 * dirname          - directory name in which cascade classifier will be created.<br>
	 *   It must exist and contain subdirectories 0, 1, 2, ... (nstages-1).<br>
	 * vecfilename      - name of .vec file with object's images<br>
	 * bgfilename       - name of background description file<br>
	 * npos             - number of positive samples used in training of each stage<br>
	 * nneg             - number of negative samples used in training of each stage<br>
	 * nstages          - number of stages<br>
	 * numprecalculated - number of features being precalculated. Each precalculated feature<br>
	 *   requires (number_of_samples*(sizeof( float ) + sizeof( short ))) bytes of memory<br>
	 * numsplits        - number of binary splits in each weak classifier<br>
	 *   1 - stumps, 2 and more - trees.<br>
	 * minhitrate       - desired min hit rate of each stage<br>
	 * maxfalsealarm    - desired max false alarm of each stage<br>
	 * weightfraction   - weight trimming parameter<br>
	 * mode             - 0 - BASIC = Viola<br>
	 *                    1 - CORE  = All upright<br>
	 *                    2 - ALL   = All features<br>
	 * symmetric        - if not 0 vertical symmetry is assumed<br>
	 * equalweights     - if not 0 initial weights of all samples will be equal<br>
	 * winwidth         - sample width<br>
	 * winheight        - sample height<br>
	 * boosttype        - type of applied boosting algorithm<br>
	 *   0 - Discrete AdaBoost<br>
	 *   1 - Real AdaBoost<br>
	 *   2 - LogitBoost<br>
	 *   3 - Gentle AdaBoost<br>
	 * stumperror       - type of used error if Discrete AdaBoost algorithm is applied<br>
	 *   0 - misclassification error<br>
	 *   1 - gini error<br>
	 *   2 - entropy error<br>
	 * Original signature : <code>void cvCreateCascadeClassifier(const char*, const char*, const char*, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:164</i><br>
	 * @deprecated use the safer methods {@link #cvCreateCascadeClassifier(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int)} and {@link #cvCreateCascadeClassifier(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int)} instead
	 */
	@java.lang.Deprecated
	void cvCreateCascadeClassifier(com.sun.jna.Pointer dirname, com.sun.jna.Pointer vecfilename, com.sun.jna.Pointer bgfilename, int npos, int nneg, int nstages, int numprecalculated, int numsplits, float minhitrate, float maxfalsealarm, float weightfraction, int mode, int symmetric, int equalweights, int winwidth, int winheight, int boosttype, int stumperror);
	/**
	 * cvCreateCascadeClassifier<br>
	 * * Create cascade classifier<br>
	 * dirname          - directory name in which cascade classifier will be created.<br>
	 *   It must exist and contain subdirectories 0, 1, 2, ... (nstages-1).<br>
	 * vecfilename      - name of .vec file with object's images<br>
	 * bgfilename       - name of background description file<br>
	 * npos             - number of positive samples used in training of each stage<br>
	 * nneg             - number of negative samples used in training of each stage<br>
	 * nstages          - number of stages<br>
	 * numprecalculated - number of features being precalculated. Each precalculated feature<br>
	 *   requires (number_of_samples*(sizeof( float ) + sizeof( short ))) bytes of memory<br>
	 * numsplits        - number of binary splits in each weak classifier<br>
	 *   1 - stumps, 2 and more - trees.<br>
	 * minhitrate       - desired min hit rate of each stage<br>
	 * maxfalsealarm    - desired max false alarm of each stage<br>
	 * weightfraction   - weight trimming parameter<br>
	 * mode             - 0 - BASIC = Viola<br>
	 *                    1 - CORE  = All upright<br>
	 *                    2 - ALL   = All features<br>
	 * symmetric        - if not 0 vertical symmetry is assumed<br>
	 * equalweights     - if not 0 initial weights of all samples will be equal<br>
	 * winwidth         - sample width<br>
	 * winheight        - sample height<br>
	 * boosttype        - type of applied boosting algorithm<br>
	 *   0 - Discrete AdaBoost<br>
	 *   1 - Real AdaBoost<br>
	 *   2 - LogitBoost<br>
	 *   3 - Gentle AdaBoost<br>
	 * stumperror       - type of used error if Discrete AdaBoost algorithm is applied<br>
	 *   0 - misclassification error<br>
	 *   1 - gini error<br>
	 *   2 - entropy error<br>
	 * Original signature : <code>void cvCreateCascadeClassifier(const char*, const char*, const char*, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:164</i>
	 */
	void cvCreateCascadeClassifier(java.lang.String dirname, java.lang.String vecfilename, java.lang.String bgfilename, int npos, int nneg, int nstages, int numprecalculated, int numsplits, float minhitrate, float maxfalsealarm, float weightfraction, int mode, int symmetric, int equalweights, int winwidth, int winheight, int boosttype, int stumperror);
	/**
	 * Original signature : <code>void cvCreateTreeCascadeClassifier(const char*, const char*, const char*, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:177</i><br>
	 * @deprecated use the safer methods {@link #cvCreateTreeCascadeClassifier(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int, int, int)} and {@link #cvCreateTreeCascadeClassifier(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int, int, int)} instead
	 */
	@java.lang.Deprecated
	void cvCreateTreeCascadeClassifier(com.sun.jna.Pointer dirname, com.sun.jna.Pointer vecfilename, com.sun.jna.Pointer bgfilename, int npos, int nneg, int nstages, int numprecalculated, int numsplits, float minhitrate, float maxfalsealarm, float weightfraction, int mode, int symmetric, int equalweights, int winwidth, int winheight, int boosttype, int stumperror, int maxtreesplits, int minpos);
	/**
	 * Original signature : <code>void cvCreateTreeCascadeClassifier(const char*, const char*, const char*, int, int, int, int, int, float, float, float, int, int, int, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : cvhaartraining.h:177</i>
	 */
	void cvCreateTreeCascadeClassifier(java.lang.String dirname, java.lang.String vecfilename, java.lang.String bgfilename, int npos, int nneg, int nstages, int numprecalculated, int numsplits, float minhitrate, float maxfalsealarm, float weightfraction, int mode, int symmetric, int equalweights, int winwidth, int winheight, int boosttype, int stumperror, int maxtreesplits, int minpos);
}
