package fr.prima.jna.opencv.cxcore;
/**
 * JNA Wrapper for library <b>cxcore</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CxcoreLibrary extends com.sun.jna.Library {
	public static final java.lang.String JNA_LIBRARY_NAME = com.ochafik.lang.jnaerator.runtime.LibraryExtractor.getLibraryPath("cxcore", true, fr.prima.jna.opencv.cxcore.CxcoreLibrary.class);
	public static final com.sun.jna.NativeLibrary JNA_NATIVE_LIB = com.sun.jna.NativeLibrary.getInstance(fr.prima.jna.opencv.cxcore.CxcoreLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final fr.prima.jna.opencv.cxcore.CxcoreLibrary INSTANCE = (fr.prima.jna.opencv.cxcore.CxcoreLibrary)com.sun.jna.Native.loadLibrary(fr.prima.jna.opencv.cxcore.CxcoreLibrary.JNA_LIBRARY_NAME, fr.prima.jna.opencv.cxcore.CxcoreLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_AUTOSTEP = 2147483647;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_MAX_ARR = 10;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_NO_DEPTH_CHECK = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_NO_CN_CHECK = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_NO_SIZE_CHECK = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CMP_EQ = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CMP_GT = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CMP_GE = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CMP_LT = 3;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CMP_LE = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CMP_NE = 5;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CHECK_RANGE = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_CHECK_QUIET = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_RAND_UNI = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_RAND_NORMAL = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GEMM_A_T = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GEMM_B_T = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GEMM_C_T = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_SVD_MODIFY_A = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_SVD_U_T = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_SVD_V_T = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_LU = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_SVD = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_SVD_SYM = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_COVAR_SCRAMBLED = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_COVAR_NORMAL = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_COVAR_USE_AVG = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_COVAR_SCALE = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_COVAR_ROWS = 8;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_COVAR_COLS = 16;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_PCA_DATA_AS_ROW = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_PCA_DATA_AS_COL = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_PCA_USE_AVG = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_C = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_L1 = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_L2 = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_NORM_MASK = 7;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_RELATIVE = 8;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DIFF = 16;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_MINMAX = 32;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_REDUCE_SUM = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_REDUCE_AVG = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_REDUCE_MAX = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_REDUCE_MIN = 3;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DXT_FORWARD = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DXT_INVERSE = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DXT_SCALE = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DXT_ROWS = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DXT_MUL_CONJ = 8;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FRONT = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_BACK = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_VERTEX = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_TREE_EDGE = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_BACK_EDGE = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_FORWARD_EDGE = 8;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_CROSS_EDGE = 16;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_ANY_EDGE = 30;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_NEW_TREE = 32;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_BACKTRACKING = 64;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_OVER = -1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_ALL_ITEMS = -1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_ITEM_VISITED_FLAG = (1 << 30);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_SEARCH_TREE_NODE_FLAG = (1 << 29);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_GRAPH_FORWARD_EDGE_FLAG = (1 << 28);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FILLED = -1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_AA = 16;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_SIMPLEX = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_PLAIN = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_DUPLEX = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_COMPLEX = 3;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_TRIPLEX = 4;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_COMPLEX_SMALL = 5;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_SCRIPT_SIMPLEX = 6;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_HERSHEY_SCRIPT_COMPLEX = 7;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_ITALIC = 16;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_ErrModeLeaf = 0;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_ErrModeParent = 1;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_ErrModeSilent = 2;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DIFF_C = (fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_DIFF | fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_C);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_RELATIVE_L1 = (fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_RELATIVE | fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_L1);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_RELATIVE_L2 = (fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_RELATIVE | fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_L2);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_RELATIVE_C = (fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_RELATIVE | fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_C);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_FONT_VECTOR0 = fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_FONT_HERSHEY_SIMPLEX;
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DIFF_L1 = (fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_DIFF | fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_L1);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DIFF_L2 = (fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_DIFF | fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_L2);
	/// <i>native declaration : cxcore.h</i>
	public static final int CV_DXT_INV_SCALE = (fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_DXT_INVERSE + fr.prima.jna.opencv.cxcore.CxcoreLibrary.CV_DXT_SCALE);
	/**
	 * <malloc> wrapper.<br>
	 * If there is no enough memory, the function<br>
	 * (as well as other OpenCV functions that call cvAlloc)<br>
	 * raises an error.<br>
	 * Original signature : <code>void* cvAlloc(size_t)</code><br>
	 * <i>native declaration : cxcore.h:71</i>
	 */
	com.sun.jna.Pointer cvAlloc(com.ochafik.lang.jnaerator.runtime.NativeSize size);
	/**
	 * <free> wrapper.<br>
	 * Here and further all the memory releasing functions<br>
	 * (that all call cvFree) take double pointer in order to<br>
	 * to clear pointer to the data after releasing it.<br>
	 * Passing pointer to NULL pointer is Ok: nothing happens in this case<br>
	 * Original signature : <code>void cvFree_(void*)</code><br>
	 * <i>native declaration : cxcore.h:79</i>
	 */
	void cvFree_(com.sun.jna.Pointer ptr);
	/**
	 * Allocates and initializes IplImage header<br>
	 * Original signature : <code>IplImage* cvCreateImageHeader(CvSize, int, int)</code><br>
	 * <i>native declaration : cxcore.h:83</i>
	 */
	fr.prima.jna.opencv.cxtypes.IplImage cvCreateImageHeader(fr.prima.jna.opencv.cxtypes.CvSize.ByValue size, int depth, int channels);
	/**
	 * Inializes IplImage header<br>
	 * Original signature : <code>IplImage* cvInitImageHeader(IplImage*, CvSize, int, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:86</i>
	 */
	fr.prima.jna.opencv.cxtypes.IplImage cvInitImageHeader(fr.prima.jna.opencv.cxtypes.IplImage image, fr.prima.jna.opencv.cxtypes.CvSize.ByValue size, int depth, int channels, int origin, int align);
	/**
	 * Creates IPL image (header and data)<br>
	 * Original signature : <code>IplImage* cvCreateImage(CvSize, int, int)</code><br>
	 * <i>native declaration : cxcore.h:91</i>
	 */
	fr.prima.jna.opencv.cxtypes.IplImage cvCreateImage(fr.prima.jna.opencv.cxtypes.CvSize.ByValue size, int depth, int channels);
	/**
	 * Releases (i.e. deallocates) IPL image header<br>
	 * Original signature : <code>void cvReleaseImageHeader(IplImage**)</code><br>
	 * <i>native declaration : cxcore.h:94</i><br>
	 * @deprecated use the safer method {@link #cvReleaseImageHeader(fr.prima.jna.opencv.cxtypes.IplImage.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseImageHeader(com.sun.jna.ptr.PointerByReference image);
	/**
	 * Releases (i.e. deallocates) IPL image header<br>
	 * Original signature : <code>void cvReleaseImageHeader(IplImage**)</code><br>
	 * <i>native declaration : cxcore.h:94</i>
	 */
	void cvReleaseImageHeader(fr.prima.jna.opencv.cxtypes.IplImage.ByReference image[]);
	/**
	 * Releases IPL image header and data<br>
	 * Original signature : <code>void cvReleaseImage(IplImage**)</code><br>
	 * <i>native declaration : cxcore.h:97</i><br>
	 * @deprecated use the safer method {@link #cvReleaseImage(fr.prima.jna.opencv.cxtypes.IplImage.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseImage(com.sun.jna.ptr.PointerByReference image);
	/**
	 * Releases IPL image header and data<br>
	 * Original signature : <code>void cvReleaseImage(IplImage**)</code><br>
	 * <i>native declaration : cxcore.h:97</i>
	 */
	void cvReleaseImage(fr.prima.jna.opencv.cxtypes.IplImage.ByReference image[]);
	/**
	 * Creates a copy of IPL image (widthStep may differ)<br>
	 * Original signature : <code>IplImage* cvCloneImage(const IplImage*)</code><br>
	 * <i>native declaration : cxcore.h:100</i>
	 */
	fr.prima.jna.opencv.cxtypes.IplImage cvCloneImage(fr.prima.jna.opencv.cxtypes.IplImage image);
	/**
	 * Sets a Channel Of Interest (only a few functions support COI) - <br>
	 * use cvCopy to extract the selected channel and/or put it back<br>
	 * Original signature : <code>void cvSetImageCOI(IplImage*, int)</code><br>
	 * <i>native declaration : cxcore.h:104</i>
	 */
	void cvSetImageCOI(fr.prima.jna.opencv.cxtypes.IplImage image, int coi);
	/**
	 * Retrieves image Channel Of Interest<br>
	 * Original signature : <code>int cvGetImageCOI(const IplImage*)</code><br>
	 * <i>native declaration : cxcore.h:107</i>
	 */
	int cvGetImageCOI(fr.prima.jna.opencv.cxtypes.IplImage image);
	/**
	 * Sets image ROI (region of interest) (COI is not changed)<br>
	 * Original signature : <code>void cvSetImageROI(IplImage*, CvRect)</code><br>
	 * <i>native declaration : cxcore.h:110</i>
	 */
	void cvSetImageROI(fr.prima.jna.opencv.cxtypes.IplImage image, fr.prima.jna.opencv.cxtypes.CvRect.ByValue rect);
	/**
	 * Resets image ROI and COI<br>
	 * Original signature : <code>void cvResetImageROI(IplImage*)</code><br>
	 * <i>native declaration : cxcore.h:113</i>
	 */
	void cvResetImageROI(fr.prima.jna.opencv.cxtypes.IplImage image);
	/**
	 * Retrieves image ROI<br>
	 * Original signature : <code>CvRect cvGetImageROI(const IplImage*)</code><br>
	 * <i>native declaration : cxcore.h:116</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvRect.ByValue cvGetImageROI(fr.prima.jna.opencv.cxtypes.IplImage image);
	/**
	 * Allocates and initalizes CvMat header<br>
	 * Original signature : <code>CvMat* cvCreateMatHeader(int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:119</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvCreateMatHeader(int rows, int cols, int type);
	/**
	 * Initializes CvMat header<br>
	 * Original signature : <code>CvMat* cvInitMatHeader(CvMat*, int, int, int, void*, int)</code><br>
	 * <i>native declaration : cxcore.h:124</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvInitMatHeader(fr.prima.jna.opencv.cxtypes.CvMat mat, int rows, int cols, int type, com.sun.jna.Pointer data, int step);
	/**
	 * Allocates and initializes CvMat header and allocates data<br>
	 * Original signature : <code>CvMat* cvCreateMat(int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:129</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvCreateMat(int rows, int cols, int type);
	/**
	 * Releases CvMat header and deallocates matrix data<br>
	 * (reference counting is used for data)<br>
	 * Original signature : <code>void cvReleaseMat(CvMat**)</code><br>
	 * <i>native declaration : cxcore.h:133</i><br>
	 * @deprecated use the safer method {@link #cvReleaseMat(fr.prima.jna.opencv.cxtypes.CvMat.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseMat(com.sun.jna.ptr.PointerByReference mat);
	/**
	 * Releases CvMat header and deallocates matrix data<br>
	 * (reference counting is used for data)<br>
	 * Original signature : <code>void cvReleaseMat(CvMat**)</code><br>
	 * <i>native declaration : cxcore.h:133</i>
	 */
	void cvReleaseMat(fr.prima.jna.opencv.cxtypes.CvMat.ByReference mat[]);
	/**
	 * Original signature : <code>void cvDecRefData(CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:137</i>
	 */
	void cvDecRefData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Original signature : <code>int cvIncRefData(CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:158</i>
	 */
	int cvIncRefData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Creates an exact copy of the input matrix (except, may be, step value)<br>
	 * Original signature : <code>CvMat* cvCloneMat(const CvMat*)</code><br>
	 * <i>native declaration : cxcore.h:178</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvCloneMat(fr.prima.jna.opencv.cxtypes.CvMat mat);
	/**
	 * Makes a new matrix from <rect> subrectangle of input array.<br>
	 * No data is copied<br>
	 * Original signature : <code>CvMat* cvGetSubRect(const CvArr*, CvMat*, CvRect)</code><br>
	 * <i>native declaration : cxcore.h:183</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvGetSubRect(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat submat, fr.prima.jna.opencv.cxtypes.CvRect.ByValue rect);
	/**
	 * Selects row span of the input array: arr(start_row:delta_row:end_row,:)<br>
	 * (end_row is not included into the span).<br>
	 * Original signature : <code>CvMat* cvGetRows(const CvArr*, CvMat*, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:188</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvGetRows(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat submat, int start_row, int end_row, int delta_row);
	/**
	 * Original signature : <code>CvMat* cvGetRow(const CvArr*, CvMat*, int)</code><br>
	 * <i>native declaration : cxcore.h:192</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvGetRow(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat submat, int row);
	/**
	 * Selects column span of the input array: arr(:,start_col:end_col)<br>
	 * (end_col is not included into the span)<br>
	 * Original signature : <code>CvMat* cvGetCols(const CvArr*, CvMat*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:200</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvGetCols(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat submat, int start_col, int end_col);
	/**
	 * Original signature : <code>CvMat* cvGetCol(const CvArr*, CvMat*, int)</code><br>
	 * <i>native declaration : cxcore.h:203</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvGetCol(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat submat, int col);
	/**
	 * Select a diagonal of the input array.<br>
	 * (diag = 0 means the main diagonal, >0 means a diagonal above the main one,<br>
	 * <0 - below the main one).<br>
	 * The diagonal will be represented as a column (nx1 matrix).<br>
	 * Original signature : <code>CvMat* cvGetDiag(const CvArr*, CvMat*, int)</code><br>
	 * <i>native declaration : cxcore.h:212</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvGetDiag(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat submat, int diag);
	/**
	 * low-level scalar <-> raw data conversion functions<br>
	 * Original signature : <code>void cvScalarToRawData(const CvScalar*, void*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:216</i>
	 */
	void cvScalarToRawData(fr.prima.jna.opencv.cxtypes.CvScalar scalar, com.sun.jna.Pointer data, int type, int extend_to_12);
	/**
	 * Original signature : <code>void cvRawDataToScalar(const void*, int, CvScalar*)</code><br>
	 * <i>native declaration : cxcore.h:219</i>
	 */
	void cvRawDataToScalar(com.sun.jna.Pointer data, int type, fr.prima.jna.opencv.cxtypes.CvScalar scalar);
	/**
	 * Allocates and initializes CvMatND header<br>
	 * Original signature : <code>CvMatND* cvCreateMatNDHeader(int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:222</i><br>
	 * @deprecated use the safer methods {@link #cvCreateMatNDHeader(int, int[], int)} and {@link #cvCreateMatNDHeader(int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvMatND cvCreateMatNDHeader(int dims, com.sun.jna.ptr.IntByReference sizes, int type);
	/**
	 * Allocates and initializes CvMatND header<br>
	 * Original signature : <code>CvMatND* cvCreateMatNDHeader(int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:222</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMatND cvCreateMatNDHeader(int dims, int sizes[], int type);
	/**
	 * Allocates and initializes CvMatND header and allocates data<br>
	 * Original signature : <code>CvMatND* cvCreateMatND(int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:225</i><br>
	 * @deprecated use the safer methods {@link #cvCreateMatND(int, int[], int)} and {@link #cvCreateMatND(int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvMatND cvCreateMatND(int dims, com.sun.jna.ptr.IntByReference sizes, int type);
	/**
	 * Allocates and initializes CvMatND header and allocates data<br>
	 * Original signature : <code>CvMatND* cvCreateMatND(int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:225</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMatND cvCreateMatND(int dims, int sizes[], int type);
	/**
	 * Initializes preallocated CvMatND header<br>
	 * Original signature : <code>CvMatND* cvInitMatNDHeader(CvMatND*, int, const int*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:228</i><br>
	 * @deprecated use the safer methods {@link #cvInitMatNDHeader(fr.prima.jna.opencv.cxtypes.CvMatND, int, int[], int, com.sun.jna.Pointer)} and {@link #cvInitMatNDHeader(fr.prima.jna.opencv.cxtypes.CvMatND, int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvMatND cvInitMatNDHeader(fr.prima.jna.opencv.cxtypes.CvMatND mat, int dims, com.sun.jna.ptr.IntByReference sizes, int type, com.sun.jna.Pointer data);
	/**
	 * Initializes preallocated CvMatND header<br>
	 * Original signature : <code>CvMatND* cvInitMatNDHeader(CvMatND*, int, const int*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:228</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMatND cvInitMatNDHeader(fr.prima.jna.opencv.cxtypes.CvMatND mat, int dims, int sizes[], int type, com.sun.jna.Pointer data);
	/**
	 * Original signature : <code>void cvReleaseMatND(CvMatND**)</code><br>
	 * <i>native declaration : cxcore.h:232</i><br>
	 * @deprecated use the safer method {@link #cvReleaseMatND(fr.prima.jna.opencv.cxtypes.CvMatND.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseMatND(com.sun.jna.ptr.PointerByReference mat);
	/**
	 * Original signature : <code>void cvReleaseMatND(CvMatND**)</code><br>
	 * <i>native declaration : cxcore.h:232</i>
	 */
	void cvReleaseMatND(fr.prima.jna.opencv.cxtypes.CvMatND.ByReference mat[]);
	/**
	 * Creates a copy of CvMatND (except, may be, steps)<br>
	 * Original signature : <code>CvMatND* cvCloneMatND(const CvMatND*)</code><br>
	 * <i>native declaration : cxcore.h:238</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMatND cvCloneMatND(fr.prima.jna.opencv.cxtypes.CvMatND mat);
	/**
	 * Allocates and initializes CvSparseMat header and allocates data<br>
	 * Original signature : <code>CvSparseMat* cvCreateSparseMat(int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:241</i><br>
	 * @deprecated use the safer methods {@link #cvCreateSparseMat(int, int[], int)} and {@link #cvCreateSparseMat(int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvSparseMat cvCreateSparseMat(int dims, com.sun.jna.ptr.IntByReference sizes, int type);
	/**
	 * Allocates and initializes CvSparseMat header and allocates data<br>
	 * Original signature : <code>CvSparseMat* cvCreateSparseMat(int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:241</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSparseMat cvCreateSparseMat(int dims, int sizes[], int type);
	/**
	 * Releases CvSparseMat<br>
	 * Original signature : <code>void cvReleaseSparseMat(CvSparseMat**)</code><br>
	 * <i>native declaration : cxcore.h:244</i><br>
	 * @deprecated use the safer method {@link #cvReleaseSparseMat(fr.prima.jna.opencv.cxtypes.CvSparseMat.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseSparseMat(com.sun.jna.ptr.PointerByReference mat);
	/**
	 * Releases CvSparseMat<br>
	 * Original signature : <code>void cvReleaseSparseMat(CvSparseMat**)</code><br>
	 * <i>native declaration : cxcore.h:244</i>
	 */
	void cvReleaseSparseMat(fr.prima.jna.opencv.cxtypes.CvSparseMat.ByReference mat[]);
	/**
	 * Creates a copy of CvSparseMat (except, may be, zero items)<br>
	 * Original signature : <code>CvSparseMat* cvCloneSparseMat(const CvSparseMat*)</code><br>
	 * <i>native declaration : cxcore.h:247</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSparseMat cvCloneSparseMat(fr.prima.jna.opencv.cxtypes.CvSparseMat mat);
	/**
	 * Initializes sparse array iterator<br>
	 * (returns the first node or NULL if the array is empty)<br>
	 * Original signature : <code>CvSparseNode* cvInitSparseMatIterator(const CvSparseMat*, CvSparseMatIterator*)</code><br>
	 * <i>native declaration : cxcore.h:251</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSparseNode cvInitSparseMatIterator(fr.prima.jna.opencv.cxtypes.CvSparseMat mat, fr.prima.jna.opencv.cxtypes.CvSparseMatIterator mat_iterator);
	/**
	 * Original signature : <code>CvSparseNode* cvGetNextSparseNode(CvSparseMatIterator*)</code><br>
	 * <i>native declaration : cxcore.h:255</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSparseNode cvGetNextSparseNode(fr.prima.jna.opencv.cxtypes.CvSparseMatIterator mat_iterator);
	/**
	 * initializes iterator that traverses through several arrays simulteneously<br>
	 * (the function together with cvNextArraySlice is used for<br>
	 * N-ari element-wise operations)<br>
	 * Original signature : <code>int cvInitNArrayIterator(int, CvArr**, const CvArr*, CvMatND*, CvNArrayIterator*, int)</code><br>
	 * <i>native declaration : cxcore.h:298</i>
	 */
	int cvInitNArrayIterator(int count, com.sun.jna.ptr.PointerByReference arrs, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask, fr.prima.jna.opencv.cxtypes.CvMatND stubs, fr.prima.jna.opencv.cxcore.CvNArrayIterator array_iterator, int flags);
	/**
	 * returns zero value if iteration is finished, non-zero (slice length) otherwise<br>
	 * Original signature : <code>int cvNextNArraySlice(CvNArrayIterator*)</code><br>
	 * <i>native declaration : cxcore.h:304</i>
	 */
	int cvNextNArraySlice(fr.prima.jna.opencv.cxcore.CvNArrayIterator array_iterator);
	/**
	 * Returns type of array elements:<br>
	 * CV_8UC1 ... CV_64FC4 ...<br>
	 * Original signature : <code>int cvGetElemType(const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:309</i>
	 */
	int cvGetElemType(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Retrieves number of an array dimensions and<br>
	 * optionally sizes of the dimensions<br>
	 * Original signature : <code>int cvGetDims(const CvArr*, int*)</code><br>
	 * <i>native declaration : cxcore.h:313</i><br>
	 * @deprecated use the safer methods {@link #cvGetDims(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, java.nio.IntBuffer)} and {@link #cvGetDims(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int cvGetDims(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.IntByReference sizes);
	/**
	 * Retrieves number of an array dimensions and<br>
	 * optionally sizes of the dimensions<br>
	 * Original signature : <code>int cvGetDims(const CvArr*, int*)</code><br>
	 * <i>native declaration : cxcore.h:313</i>
	 */
	int cvGetDims(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, java.nio.IntBuffer sizes);
	/**
	 * Retrieves size of a particular array dimension.<br>
	 * For 2d arrays cvGetDimSize(arr,0) returns number of rows (image height)<br>
	 * and cvGetDimSize(arr,1) returns number of columns (image width)<br>
	 * Original signature : <code>int cvGetDimSize(const CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:319</i>
	 */
	int cvGetDimSize(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int index);
	/**
	 * ptr = &arr(idx0,idx1,...). All indexes are zero-based,<br>
	 * the major dimensions go first (e.g. (y,x) for 2D, (z,y,x) for 3D<br>
	 * Original signature : <code>uchar* cvPtr1D(const CvArr*, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:324</i><br>
	 * @deprecated use the safer methods {@link #cvPtr1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, java.nio.IntBuffer)} and {@link #cvPtr1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer cvPtr1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, com.sun.jna.ptr.IntByReference type);
	/**
	 * ptr = &arr(idx0,idx1,...). All indexes are zero-based,<br>
	 * the major dimensions go first (e.g. (y,x) for 2D, (z,y,x) for 3D<br>
	 * Original signature : <code>uchar* cvPtr1D(const CvArr*, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:324</i>
	 */
	com.sun.jna.Pointer cvPtr1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, java.nio.IntBuffer type);
	/**
	 * Original signature : <code>uchar* cvPtr2D(const CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:325</i><br>
	 * @deprecated use the safer methods {@link #cvPtr2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, int, java.nio.IntBuffer)} and {@link #cvPtr2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer cvPtr2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, com.sun.jna.ptr.IntByReference type);
	/**
	 * Original signature : <code>uchar* cvPtr2D(const CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:325</i>
	 */
	com.sun.jna.Pointer cvPtr2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, java.nio.IntBuffer type);
	/**
	 * Original signature : <code>uchar* cvPtr3D(const CvArr*, int, int, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:326</i><br>
	 * @deprecated use the safer methods {@link #cvPtr3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, int, int, java.nio.IntBuffer)} and {@link #cvPtr3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer cvPtr3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, int idx2, com.sun.jna.ptr.IntByReference type);
	/**
	 * Original signature : <code>uchar* cvPtr3D(const CvArr*, int, int, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:326</i>
	 */
	com.sun.jna.Pointer cvPtr3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, int idx2, java.nio.IntBuffer type);
	/**
	 * For CvMat or IplImage number of indices should be 2<br>
	 * (row index (y) goes first, column index (x) goes next).<br>
	 * For CvMatND or CvSparseMat number of infices should match number of <dims> and<br>
	 * indices order should match the array dimension order.<br>
	 * Original signature : <code>uchar* cvPtrND(const CvArr*, const int*, int*, int, unsigned*)</code><br>
	 * <i>native declaration : cxcore.h:333</i><br>
	 * @deprecated use the safer methods {@link #cvPtrND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int[], java.nio.IntBuffer, int, java.nio.IntBuffer)} and {@link #cvPtrND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer cvPtrND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.IntByReference idx, com.sun.jna.ptr.IntByReference type, int create_node, com.sun.jna.ptr.IntByReference precalc_hashval);
	/**
	 * For CvMat or IplImage number of indices should be 2<br>
	 * (row index (y) goes first, column index (x) goes next).<br>
	 * For CvMatND or CvSparseMat number of infices should match number of <dims> and<br>
	 * indices order should match the array dimension order.<br>
	 * Original signature : <code>uchar* cvPtrND(const CvArr*, const int*, int*, int, unsigned*)</code><br>
	 * <i>native declaration : cxcore.h:333</i>
	 */
	com.sun.jna.Pointer cvPtrND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx[], java.nio.IntBuffer type, int create_node, java.nio.IntBuffer precalc_hashval);
	/**
	 * value = arr(idx0,idx1,...)<br>
	 * Original signature : <code>CvScalar cvGet1D(const CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:338</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvGet1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0);
	/**
	 * Original signature : <code>CvScalar cvGet2D(const CvArr*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:339</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvGet2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1);
	/**
	 * Original signature : <code>CvScalar cvGet3D(const CvArr*, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:340</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvGet3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, int idx2);
	/**
	 * Original signature : <code>CvScalar cvGetND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : cxcore.h:341</i><br>
	 * @deprecated use the safer methods {@link #cvGetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvGetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvGetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.IntByReference idx);
	/**
	 * Original signature : <code>CvScalar cvGetND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : cxcore.h:341</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvGetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx[]);
	/**
	 * for 1-channel arrays<br>
	 * Original signature : <code>double cvGetReal1D(const CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:344</i>
	 */
	double cvGetReal1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0);
	/**
	 * Original signature : <code>double cvGetReal2D(const CvArr*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:345</i>
	 */
	double cvGetReal2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1);
	/**
	 * Original signature : <code>double cvGetReal3D(const CvArr*, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:346</i>
	 */
	double cvGetReal3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, int idx2);
	/**
	 * Original signature : <code>double cvGetRealND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : cxcore.h:347</i><br>
	 * @deprecated use the safer methods {@link #cvGetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvGetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	double cvGetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.IntByReference idx);
	/**
	 * Original signature : <code>double cvGetRealND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : cxcore.h:347</i>
	 */
	double cvGetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx[]);
	/**
	 * arr(idx0,idx1,...) = value<br>
	 * Original signature : <code>void cvSet1D(CvArr*, int, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:350</i>
	 */
	void cvSet1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSet2D(CvArr*, int, int, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:351</i>
	 */
	void cvSet2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSet3D(CvArr*, int, int, int, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:352</i>
	 */
	void cvSet3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, int idx2, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSetND(CvArr*, const int*, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:353</i><br>
	 * @deprecated use the safer methods {@link #cvSetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int[], fr.prima.jna.opencv.cxtypes.CvScalar.ByValue)} and {@link #cvSetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue)} instead
	 */
	@java.lang.Deprecated
	void cvSetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.IntByReference idx, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSetND(CvArr*, const int*, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:353</i>
	 */
	void cvSetND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx[], fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value);
	/**
	 * for 1-channel arrays<br>
	 * Original signature : <code>void cvSetReal1D(CvArr*, int, double)</code><br>
	 * <i>native declaration : cxcore.h:356</i>
	 */
	void cvSetReal1D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, double value);
	/**
	 * Original signature : <code>void cvSetReal2D(CvArr*, int, int, double)</code><br>
	 * <i>native declaration : cxcore.h:357</i>
	 */
	void cvSetReal2D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, double value);
	/**
	 * Original signature : <code>void cvSetReal3D(CvArr*, int, int, int, double)</code><br>
	 * <i>native declaration : cxcore.h:358</i>
	 */
	void cvSetReal3D(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx0, int idx1, int idx2, double value);
	/**
	 * Original signature : <code>void cvSetRealND(CvArr*, const int*, double)</code><br>
	 * <i>native declaration : cxcore.h:360</i><br>
	 * @deprecated use the safer methods {@link #cvSetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int[], double)} and {@link #cvSetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference, double)} instead
	 */
	@java.lang.Deprecated
	void cvSetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.IntByReference idx, double value);
	/**
	 * Original signature : <code>void cvSetRealND(CvArr*, const int*, double)</code><br>
	 * <i>native declaration : cxcore.h:360</i>
	 */
	void cvSetRealND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx[], double value);
	/**
	 * clears element of ND dense array,<br>
	 * in case of sparse arrays it deletes the specified node<br>
	 * Original signature : <code>void cvClearND(CvArr*, const int*)</code><br>
	 * <i>native declaration : cxcore.h:364</i><br>
	 * @deprecated use the safer methods {@link #cvClearND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvClearND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	void cvClearND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.IntByReference idx);
	/**
	 * clears element of ND dense array,<br>
	 * in case of sparse arrays it deletes the specified node<br>
	 * Original signature : <code>void cvClearND(CvArr*, const int*)</code><br>
	 * <i>native declaration : cxcore.h:364</i>
	 */
	void cvClearND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int idx[]);
	/**
	 * Converts CvArr (IplImage or CvMat,...) to CvMat.<br>
	 * If the last parameter is non-zero, function can<br>
	 * convert multi(>2)-dimensional array to CvMat as long as<br>
	 * the last array's dimension is continous. The resultant<br>
	 * matrix will be have appropriate (a huge) number of rows<br>
	 * Original signature : <code>CvMat* cvGetMat(const CvArr*, CvMat*, int*, int)</code><br>
	 * <i>native declaration : cxcore.h:371</i><br>
	 * @deprecated use the safer methods {@link #cvGetMat(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, fr.prima.jna.opencv.cxtypes.CvMat, java.nio.IntBuffer, int)} and {@link #cvGetMat(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, fr.prima.jna.opencv.cxtypes.CvMat, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvMat cvGetMat(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat header, com.sun.jna.ptr.IntByReference coi, int allowND);
	/**
	 * Converts CvArr (IplImage or CvMat,...) to CvMat.<br>
	 * If the last parameter is non-zero, function can<br>
	 * convert multi(>2)-dimensional array to CvMat as long as<br>
	 * the last array's dimension is continous. The resultant<br>
	 * matrix will be have appropriate (a huge) number of rows<br>
	 * Original signature : <code>CvMat* cvGetMat(const CvArr*, CvMat*, int*, int)</code><br>
	 * <i>native declaration : cxcore.h:371</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvGetMat(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat header, java.nio.IntBuffer coi, int allowND);
	/**
	 * Converts CvArr (IplImage or CvMat) to IplImage<br>
	 * Original signature : <code>IplImage* cvGetImage(const CvArr*, IplImage*)</code><br>
	 * <i>native declaration : cxcore.h:376</i>
	 */
	fr.prima.jna.opencv.cxtypes.IplImage cvGetImage(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.IplImage image_header);
	/**
	 * Changes a shape of multi-dimensional array.<br>
	 * new_cn == 0 means that number of channels remains unchanged.<br>
	 * new_dims == 0 means that number and sizes of dimensions remain the same<br>
	 * (unless they need to be changed to set the new number of channels)<br>
	 * if new_dims == 1, there is no need to specify new dimension sizes<br>
	 * The resultant configuration should be achievable w/o data copying.<br>
	 * If the resultant array is sparse, CvSparseMat header should be passed<br>
	 * to the function else if the result is 1 or 2 dimensional,<br>
	 * CvMat header should be passed to the function<br>
	 * else CvMatND header should be passed<br>
	 * Original signature : <code>CvArr* cvReshapeMatND(const CvArr*, int, CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:389</i><br>
	 * @deprecated use the safer methods {@link #cvReshapeMatND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, int, java.nio.IntBuffer)} and {@link #cvReshapeMatND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr cvReshapeMatND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int sizeof_header, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr header, int new_cn, int new_dims, com.sun.jna.ptr.IntByReference new_sizes);
	/**
	 * Changes a shape of multi-dimensional array.<br>
	 * new_cn == 0 means that number of channels remains unchanged.<br>
	 * new_dims == 0 means that number and sizes of dimensions remain the same<br>
	 * (unless they need to be changed to set the new number of channels)<br>
	 * if new_dims == 1, there is no need to specify new dimension sizes<br>
	 * The resultant configuration should be achievable w/o data copying.<br>
	 * If the resultant array is sparse, CvSparseMat header should be passed<br>
	 * to the function else if the result is 1 or 2 dimensional,<br>
	 * CvMat header should be passed to the function<br>
	 * else CvMatND header should be passed<br>
	 * Original signature : <code>CvArr* cvReshapeMatND(const CvArr*, int, CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : cxcore.h:389</i>
	 */
	fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr cvReshapeMatND(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int sizeof_header, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr header, int new_cn, int new_dims, java.nio.IntBuffer new_sizes);
	/**
	 * Original signature : <code>CvMat* cvReshape(const CvArr*, CvMat*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:397</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMat cvReshape(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvMat header, int new_cn, int new_rows);
	/**
	 * Repeats source 2d array several times in both horizontal and<br>
	 * vertical direction to fill destination array<br>
	 * Original signature : <code>void cvRepeat(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:402</i>
	 */
	void cvRepeat(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * Allocates array data<br>
	 * Original signature : <code>void cvCreateData(CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:405</i>
	 */
	void cvCreateData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Releases array data<br>
	 * Original signature : <code>void cvReleaseData(CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:408</i>
	 */
	void cvReleaseData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Attaches user data to the array header. The step is reffered to<br>
	 * the pre-last dimension. That is, all the planes of the array<br>
	 * must be joint (w/o gaps)<br>
	 * Original signature : <code>void cvSetData(CvArr*, void*, int)</code><br>
	 * <i>native declaration : cxcore.h:413</i>
	 */
	void cvSetData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.Pointer data, int step);
	/**
	 * Retrieves raw data of CvMat, IplImage or CvMatND.<br>
	 * In the latter case the function raises an error if<br>
	 * the array can not be represented as a matrix<br>
	 * Original signature : <code>void cvGetRawData(const CvArr*, uchar**, int*, CvSize*)</code><br>
	 * <i>native declaration : cxcore.h:418</i><br>
	 * @deprecated use the safer methods {@link #cvGetRawData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, fr.prima.jna.opencv.cxtypes.CvSize)} and {@link #cvGetRawData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, fr.prima.jna.opencv.cxtypes.CvSize)} instead
	 */
	@java.lang.Deprecated
	void cvGetRawData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.PointerByReference data, com.sun.jna.ptr.IntByReference step, fr.prima.jna.opencv.cxtypes.CvSize roi_size);
	/**
	 * Retrieves raw data of CvMat, IplImage or CvMatND.<br>
	 * In the latter case the function raises an error if<br>
	 * the array can not be represented as a matrix<br>
	 * Original signature : <code>void cvGetRawData(const CvArr*, uchar**, int*, CvSize*)</code><br>
	 * <i>native declaration : cxcore.h:418</i>
	 */
	void cvGetRawData(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.PointerByReference data, java.nio.IntBuffer step, fr.prima.jna.opencv.cxtypes.CvSize roi_size);
	/**
	 * Returns width and height of array in elements<br>
	 * Original signature : <code>CvSize cvGetSize(const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:423</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSize.ByValue cvGetSize(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Copies source array to destination array<br>
	 * Original signature : <code>void cvCopy(const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:426</i>
	 */
	void cvCopy(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Sets all or "masked" elements of input array<br>
	 * to the same value<br>
	 * Original signature : <code>void cvSet(CvArr*, CvScalar, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:431</i>
	 */
	void cvSet(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Clears all the array elements (sets them to 0)<br>
	 * Original signature : <code>void cvSetZero(CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:435</i>
	 */
	void cvSetZero(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Splits a multi-channel array into the set of single-channel arrays or<br>
	 * extracts particular [color] plane<br>
	 * Original signature : <code>void cvSplit(const CvArr*, CvArr*, CvArr*, CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:441</i>
	 */
	void cvSplit(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst0, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst3);
	/**
	 * Merges a set of single-channel arrays into the single multi-channel array<br>
	 * or inserts one particular [color] plane to the array<br>
	 * Original signature : <code>void cvMerge(const CvArr*, const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:446</i>
	 */
	void cvMerge(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src0, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src3, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * Copies several channels from input arrays to<br>
	 * certain channels of output arrays<br>
	 * Original signature : <code>void cvMixChannels(const CvArr**, int, CvArr**, int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:452</i><br>
	 * @deprecated use the safer methods {@link #cvMixChannels(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference, int, int[], int)} and {@link #cvMixChannels(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@java.lang.Deprecated
	void cvMixChannels(com.sun.jna.ptr.PointerByReference src, int src_count, com.sun.jna.ptr.PointerByReference dst, int dst_count, com.sun.jna.ptr.IntByReference from_to, int pair_count);
	/**
	 * Copies several channels from input arrays to<br>
	 * certain channels of output arrays<br>
	 * Original signature : <code>void cvMixChannels(const CvArr**, int, CvArr**, int, const int*, int)</code><br>
	 * <i>native declaration : cxcore.h:452</i>
	 */
	void cvMixChannels(com.sun.jna.ptr.PointerByReference src, int src_count, com.sun.jna.ptr.PointerByReference dst, int dst_count, int from_to[], int pair_count);
	/**
	 * Performs linear transformation on every source array element:<br>
	 * dst(x,y,c) = scale*src(x,y,c)+shift.<br>
	 * Arbitrary combination of input and output array depths are allowed<br>
	 * (number of channels must be the same), thus the function can be used<br>
	 * for type conversion<br>
	 * Original signature : <code>void cvConvertScale(const CvArr*, CvArr*, double, double)</code><br>
	 * <i>native declaration : cxcore.h:461</i>
	 */
	void cvConvertScale(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, double scale, double shift);
	/**
	 * Performs linear transformation on every source array element,<br>
	 * stores absolute value of the result:<br>
	 * dst(x,y,c) = abs(scale*src(x,y,c)+shift).<br>
	 * destination array must have 8u type.<br>
	 * In other cases one may use cvConvertScale + cvAbsDiffS<br>
	 * Original signature : <code>void cvConvertScaleAbs(const CvArr*, CvArr*, double, double)</code><br>
	 * <i>native declaration : cxcore.h:474</i>
	 */
	void cvConvertScaleAbs(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, double scale, double shift);
	/**
	 * checks termination criteria validity and<br>
	 * sets eps to default_eps (if it is not set),<br>
	 * max_iter to default_max_iters (if it is not set)<br>
	 * Original signature : <code>CvTermCriteria cvCheckTermCriteria(CvTermCriteria, double, int)</code><br>
	 * <i>native declaration : cxcore.h:484</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvTermCriteria.ByValue cvCheckTermCriteria(fr.prima.jna.opencv.cxtypes.CvTermCriteria.ByValue criteria, double default_eps, int default_max_iters);
	/**
	 * dst(mask) = src1(mask) + src2(mask)<br>
	 * Original signature : <code>void cvAdd(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:493</i>
	 */
	void cvAdd(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(mask) = src(mask) + value<br>
	 * Original signature : <code>void cvAddS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:497</i>
	 */
	void cvAddS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(mask) = src1(mask) - src2(mask)<br>
	 * Original signature : <code>void cvSub(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:501</i>
	 */
	void cvSub(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Original signature : <code>void cvSubS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:505</i>
	 */
	void cvSubS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(mask) = value - src(mask)<br>
	 * Original signature : <code>void cvSubRS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:513</i>
	 */
	void cvSubRS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(idx) = src1(idx) * src2(idx) * scale<br>
	 * (scaled element-wise multiplication of 2 arrays)<br>
	 * Original signature : <code>void cvMul(const CvArr*, const CvArr*, CvArr*, double)</code><br>
	 * <i>native declaration : cxcore.h:518</i>
	 */
	void cvMul(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, double scale);
	/**
	 * element-wise division/inversion with scaling: <br>
	 * dst(idx) = src1(idx) * scale / src2(idx)<br>
	 * or dst(idx) = scale / src2(idx) if src1 == 0<br>
	 * Original signature : <code>void cvDiv(const CvArr*, const CvArr*, CvArr*, double)</code><br>
	 * <i>native declaration : cxcore.h:524</i>
	 */
	void cvDiv(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, double scale);
	/**
	 * dst = src1 * scale + src2<br>
	 * Original signature : <code>void cvScaleAdd(const CvArr*, CvScalar, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:528</i>
	 */
	void cvScaleAdd(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue scale, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst = src1 * alpha + src2 * beta + gamma<br>
	 * Original signature : <code>void cvAddWeighted(const CvArr*, double, const CvArr*, double, double, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:533</i>
	 */
	void cvAddWeighted(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, double alpha, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, double beta, double gamma, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * result = sum_i(src1(i) * src2(i)) (results for all channels are accumulated together)<br>
	 * Original signature : <code>double cvDotProduct(const CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:538</i>
	 */
	double cvDotProduct(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2);
	/**
	 * dst(idx) = src1(idx) & src2(idx)<br>
	 * Original signature : <code>void cvAnd(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:541</i>
	 */
	void cvAnd(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(idx) = src(idx) & value<br>
	 * Original signature : <code>void cvAndS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:545</i>
	 */
	void cvAndS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(idx) = src1(idx) | src2(idx)<br>
	 * Original signature : <code>void cvOr(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:549</i>
	 */
	void cvOr(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(idx) = src(idx) | value<br>
	 * Original signature : <code>void cvOrS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:553</i>
	 */
	void cvOrS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(idx) = src1(idx) ^ src2(idx)<br>
	 * Original signature : <code>void cvXor(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:557</i>
	 */
	void cvXor(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(idx) = src(idx) ^ value<br>
	 * Original signature : <code>void cvXorS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:561</i>
	 */
	void cvXorS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * dst(idx) = ~src(idx)<br>
	 * Original signature : <code>void cvNot(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:565</i>
	 */
	void cvNot(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(idx) = lower(idx) <= src(idx) < upper(idx)<br>
	 * Original signature : <code>void cvInRange(const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:568</i>
	 */
	void cvInRange(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr lower, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr upper, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(idx) = lower <= src(idx) < upper<br>
	 * Original signature : <code>void cvInRangeS(const CvArr*, CvScalar, CvScalar, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:572</i>
	 */
	void cvInRangeS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue lower, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue upper, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(idx) = src1(idx) _cmp_op_ src2(idx)<br>
	 * Original signature : <code>void cvCmp(const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:586</i>
	 */
	void cvCmp(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int cmp_op);
	/**
	 * dst(idx) = src1(idx) _cmp_op_ value<br>
	 * Original signature : <code>void cvCmpS(const CvArr*, double, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:589</i>
	 */
	void cvCmpS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, double value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int cmp_op);
	/**
	 * dst(idx) = min(src1(idx),src2(idx))<br>
	 * Original signature : <code>void cvMin(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:592</i>
	 */
	void cvMin(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(idx) = max(src1(idx),src2(idx))<br>
	 * Original signature : <code>void cvMax(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:595</i>
	 */
	void cvMax(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(idx) = min(src(idx),value)<br>
	 * Original signature : <code>void cvMinS(const CvArr*, double, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:598</i>
	 */
	void cvMinS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, double value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(idx) = max(src(idx),value)<br>
	 * Original signature : <code>void cvMaxS(const CvArr*, double, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:601</i>
	 */
	void cvMaxS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, double value, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(x,y,c) = abs(src1(x,y,c) - src2(x,y,c))<br>
	 * Original signature : <code>void cvAbsDiff(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:604</i>
	 */
	void cvAbsDiff(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * dst(x,y,c) = abs(src(x,y,c) - value(c))<br>
	 * Original signature : <code>void cvAbsDiffS(const CvArr*, CvArr*, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:607</i>
	 */
	void cvAbsDiffS(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value);
	/**
	 * Does cartesian->polar coordinates conversion.<br>
	 * Either of output components (magnitude or angle) is optional<br>
	 * Original signature : <code>void cvCartToPolar(const CvArr*, const CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:616</i>
	 */
	void cvCartToPolar(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr x, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr y, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr magnitude, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr angle, int angle_in_degrees);
	/**
	 * Does polar->cartesian coordinates conversion.<br>
	 * Either of output components (magnitude or angle) is optional.<br>
	 * If magnitude is missing it is assumed to be all 1's<br>
	 * Original signature : <code>void cvPolarToCart(const CvArr*, const CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:623</i>
	 */
	void cvPolarToCart(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr magnitude, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr angle, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr x, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr y, int angle_in_degrees);
	/**
	 * Does powering: dst(idx) = src(idx)^power<br>
	 * Original signature : <code>void cvPow(const CvArr*, CvArr*, double)</code><br>
	 * <i>native declaration : cxcore.h:628</i>
	 */
	void cvPow(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, double power);
	/**
	 * Does exponention: dst(idx) = exp(src(idx)).<br>
	 * Overflow is not handled yet. Underflow is handled.<br>
	 * Maximal relative error is ~7e-6 for single-precision input<br>
	 * Original signature : <code>void cvExp(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:633</i>
	 */
	void cvExp(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * Calculates natural logarithms: dst(idx) = log(abs(src(idx))).<br>
	 * Logarithm of 0 gives large negative number(~-700)<br>
	 * Maximal relative error is ~3e-7 for single-precision output<br>
	 * Original signature : <code>void cvLog(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:639</i>
	 */
	void cvLog(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * Fast arctangent calculation<br>
	 * Original signature : <code>float cvFastArctan(float, float)</code><br>
	 * <i>native declaration : cxcore.h:642</i>
	 */
	float cvFastArctan(float y, float x);
	/**
	 * Fast cubic root calculation<br>
	 * Original signature : <code>float cvCbrt(float)</code><br>
	 * <i>native declaration : cxcore.h:645</i>
	 */
	float cvCbrt(float value);
	/**
	 * Original signature : <code>int cvCheckArr(const CvArr*, int, double, double)</code><br>
	 * <i>native declaration : cxcore.h:653</i>
	 */
	int cvCheckArr(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int flags, double min_val, double max_val);
	/**
	 * Original signature : <code>void cvRandArr(CvRNG*, CvArr*, int, CvScalar, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:659</i><br>
	 * @deprecated use the safer methods {@link #cvRandArr(java.nio.LongBuffer, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue)} and {@link #cvRandArr(com.sun.jna.ptr.LongByReference, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, int, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue)} instead
	 */
	@java.lang.Deprecated
	void cvRandArr(com.sun.jna.ptr.LongByReference rng, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int dist_type, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue param1, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue param2);
	/**
	 * Original signature : <code>void cvRandArr(CvRNG*, CvArr*, int, CvScalar, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:659</i>
	 */
	void cvRandArr(java.nio.LongBuffer rng, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, int dist_type, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue param1, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue param2);
	/**
	 * Original signature : <code>void cvRandShuffle(CvArr*, CvRNG*, double)</code><br>
	 * <i>native declaration : cxcore.h:662</i><br>
	 * @deprecated use the safer methods {@link #cvRandShuffle(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, java.nio.LongBuffer, double)} and {@link #cvRandShuffle(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.LongByReference, double)} instead
	 */
	@java.lang.Deprecated
	void cvRandShuffle(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat, com.sun.jna.ptr.LongByReference rng, double iter_factor);
	/**
	 * Original signature : <code>void cvRandShuffle(CvArr*, CvRNG*, double)</code><br>
	 * <i>native declaration : cxcore.h:662</i>
	 */
	void cvRandShuffle(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat, java.nio.LongBuffer rng, double iter_factor);
	/**
	 * Finds real roots of a cubic equation<br>
	 * Original signature : <code>int cvSolveCubic(const CvMat*, CvMat*)</code><br>
	 * <i>native declaration : cxcore.h:666</i>
	 */
	int cvSolveCubic(fr.prima.jna.opencv.cxtypes.CvMat coeffs, fr.prima.jna.opencv.cxtypes.CvMat roots);
	/**
	 * Calculates cross product of two 3d vectors<br>
	 * Original signature : <code>void cvCrossProduct(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:673</i>
	 */
	void cvCrossProduct(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * Extended matrix transform:<br>
	 * dst = alpha*op(A)*op(B) + beta*op(C), where op(X) is X or X^T<br>
	 * Original signature : <code>void cvGEMM(const CvArr*, const CvArr*, double, const CvArr*, double, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:684</i>
	 */
	void cvGEMM(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, double alpha, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src3, double beta, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int tABC);
	/**
	 * Transforms each element of source array and stores<br>
	 * resultant vectors in destination array<br>
	 * Original signature : <code>void cvTransform(const CvArr*, CvArr*, const CvMat*, const CvMat*)</code><br>
	 * <i>native declaration : cxcore.h:691</i>
	 */
	void cvTransform(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.cxtypes.CvMat transmat, fr.prima.jna.opencv.cxtypes.CvMat shiftvec);
	/**
	 * Does perspective transform on every element of input array<br>
	 * Original signature : <code>void cvPerspectiveTransform(const CvArr*, CvArr*, const CvMat*)</code><br>
	 * <i>native declaration : cxcore.h:697</i>
	 */
	void cvPerspectiveTransform(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.cxtypes.CvMat mat);
	/**
	 * Calculates (A-delta)*(A-delta)^T (order=0) or (A-delta)^T*(A-delta) (order=1)<br>
	 * Original signature : <code>void cvMulTransposed(const CvArr*, CvArr*, int, const CvArr*, double)</code><br>
	 * <i>native declaration : cxcore.h:701</i>
	 */
	void cvMulTransposed(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int order, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr delta, double scale);
	/**
	 * Tranposes matrix. Square matrices can be transposed in-place<br>
	 * Original signature : <code>void cvTranspose(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:706</i>
	 */
	void cvTranspose(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst);
	/**
	 * Mirror array data around horizontal (flip=0),<br>
	 * vertical (flip=1) or both(flip=-1) axises:<br>
	 * cvFlip(src) flips images vertically and sequences horizontally (inplace)<br>
	 * Original signature : <code>void cvFlip(const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:713</i>
	 */
	void cvFlip(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int flip_mode);
	/**
	 * Performs Singular Value Decomposition of a matrix<br>
	 * Original signature : <code>void cvSVD(CvArr*, CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:723</i>
	 */
	void cvSVD(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr A, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr W, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr U, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr V, int flags);
	/**
	 * Performs Singular Value Back Substitution (solves A*X = B):<br>
	 * flags must be the same as in cvSVD<br>
	 * Original signature : <code>void cvSVBkSb(const CvArr*, const CvArr*, const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:728</i>
	 */
	void cvSVBkSb(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr W, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr U, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr V, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr B, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr X, int flags);
	/**
	 * Inverts matrix<br>
	 * Original signature : <code>double cvInvert(const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:736</i>
	 */
	double cvInvert(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int method);
	/**
	 * Solves linear system (src1)*(dst) = (src2)<br>
	 * (returns 0 if src1 is a singular and CV_LU method is used)<br>
	 * Original signature : <code>int cvSolve(const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:742</i>
	 */
	int cvSolve(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int method);
	/**
	 * Calculates determinant of input matrix<br>
	 * Original signature : <code>double cvDet(const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:746</i>
	 */
	double cvDet(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat);
	/**
	 * Calculates trace of the matrix (sum of elements on the main diagonal)<br>
	 * Original signature : <code>CvScalar cvTrace(const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:749</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvTrace(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat);
	/**
	 * Finds eigen values and vectors of a symmetric matrix<br>
	 * Original signature : <code>void cvEigenVV(CvArr*, CvArr*, CvArr*, double)</code><br>
	 * <i>native declaration : cxcore.h:752</i>
	 */
	void cvEigenVV(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr evects, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr evals, double eps);
	/**
	 * Makes an identity matrix (mat_ij = i == j)<br>
	 * Original signature : <code>void cvSetIdentity(CvArr*, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:756</i>
	 */
	void cvSetIdentity(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue value);
	/**
	 * Fills matrix with given range of numbers<br>
	 * Original signature : <code>CvArr* cvRange(CvArr*, double, double)</code><br>
	 * <i>native declaration : cxcore.h:759</i>
	 */
	fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr cvRange(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat, double start, double end);
	/**
	 * Original signature : <code>void cvCalcCovarMatrix(const CvArr**, int, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:781</i>
	 */
	void cvCalcCovarMatrix(com.sun.jna.ptr.PointerByReference vects, int count, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr cov_mat, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr avg, int flags);
	/**
	 * Original signature : <code>void cvCalcPCA(const CvArr*, CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:787</i>
	 */
	void cvCalcPCA(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr data, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mean, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr eigenvals, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr eigenvects, int flags);
	/**
	 * Original signature : <code>void cvProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:790</i>
	 */
	void cvProjectPCA(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr data, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mean, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr eigenvects, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr result);
	/**
	 * Original signature : <code>void cvBackProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:793</i>
	 */
	void cvBackProjectPCA(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr proj, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mean, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr eigenvects, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr result);
	/**
	 * Calculates Mahalanobis(weighted) distance<br>
	 * Original signature : <code>double cvMahalanobis(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:797</i>
	 */
	double cvMahalanobis(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr vec1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr vec2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mat);
	/**
	 * Finds sum of array elements<br>
	 * Original signature : <code>CvScalar cvSum(const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:805</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvSum(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Calculates number of non-zero pixels<br>
	 * Original signature : <code>int cvCountNonZero(const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:808</i>
	 */
	int cvCountNonZero(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr);
	/**
	 * Calculates mean value of array elements<br>
	 * Original signature : <code>CvScalar cvAvg(const CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:811</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvAvg(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Calculates mean and standard deviation of pixel values<br>
	 * Original signature : <code>void cvAvgSdv(const CvArr*, CvScalar*, CvScalar*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:814</i>
	 */
	void cvAvgSdv(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, fr.prima.jna.opencv.cxtypes.CvScalar mean, fr.prima.jna.opencv.cxtypes.CvScalar std_dev, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Finds global minimum, maximum and their positions<br>
	 * Original signature : <code>void cvMinMaxLoc(const CvArr*, double*, double*, CvPoint*, CvPoint*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:818</i><br>
	 * @deprecated use the safer methods {@link #cvMinMaxLoc(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, java.nio.DoubleBuffer, java.nio.DoubleBuffer, fr.prima.jna.opencv.cxtypes.CvPoint, fr.prima.jna.opencv.cxtypes.CvPoint, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr)} and {@link #cvMinMaxLoc(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, fr.prima.jna.opencv.cxtypes.CvPoint, fr.prima.jna.opencv.cxtypes.CvPoint, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr)} instead
	 */
	@java.lang.Deprecated
	void cvMinMaxLoc(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, com.sun.jna.ptr.DoubleByReference min_val, com.sun.jna.ptr.DoubleByReference max_val, fr.prima.jna.opencv.cxtypes.CvPoint min_loc, fr.prima.jna.opencv.cxtypes.CvPoint max_loc, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Finds global minimum, maximum and their positions<br>
	 * Original signature : <code>void cvMinMaxLoc(const CvArr*, double*, double*, CvPoint*, CvPoint*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:818</i>
	 */
	void cvMinMaxLoc(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr, java.nio.DoubleBuffer min_val, java.nio.DoubleBuffer max_val, fr.prima.jna.opencv.cxtypes.CvPoint min_loc, fr.prima.jna.opencv.cxtypes.CvPoint max_loc, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Finds norm, difference norm or relative difference norm for an array (or two arrays)<br>
	 * Original signature : <code>double cvNorm(const CvArr*, const CvArr*, int, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:840</i>
	 */
	double cvNorm(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr arr2, int norm_type, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Original signature : <code>void cvNormalize(const CvArr*, CvArr*, double, double, int, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:844</i>
	 */
	void cvNormalize(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, double a, double b, int norm_type, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr mask);
	/**
	 * Original signature : <code>void cvReduce(const CvArr*, CvArr*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:855</i>
	 */
	void cvReduce(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int dim, int op);
	/**
	 * Discrete Fourier Transform:<br>
	 * complex->complex,<br>
	 * real->ccs (forward),<br>
	 * ccs->real (inverse)<br>
	 * Original signature : <code>void cvDFT(const CvArr*, CvArr*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:874</i>
	 */
	void cvDFT(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int flags, int nonzero_rows);
	/**
	 * Multiply results of DFTs: DFT(X)*DFT(Y) or DFT(X)*conj(DFT(Y))<br>
	 * Original signature : <code>void cvMulSpectrums(const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:879</i>
	 */
	void cvMulSpectrums(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src1, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src2, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int flags);
	/**
	 * Finds optimal DFT vector size >= size0<br>
	 * Original signature : <code>int cvGetOptimalDFTSize(int)</code><br>
	 * <i>native declaration : cxcore.h:883</i>
	 */
	int cvGetOptimalDFTSize(int size0);
	/**
	 * Discrete Cosine Transform<br>
	 * Original signature : <code>void cvDCT(const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : cxcore.h:886</i>
	 */
	void cvDCT(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, int flags);
	/**
	 * Calculates length of sequence slice (with support of negative indices).<br>
	 * Original signature : <code>int cvSliceLength(CvSlice, const CvSeq*)</code><br>
	 * <i>native declaration : cxcore.h:893</i>
	 */
	int cvSliceLength(fr.prima.jna.opencv.cxtypes.CvSlice.ByValue slice, fr.prima.jna.opencv.cxtypes.CvSeq seq);
	/**
	 * Creates new memory storage.<br>
	 * block_size == 0 means that default,<br>
	 * somewhat optimal size, is used (currently, it is 64K)<br>
	 * Original signature : <code>CvMemStorage* cvCreateMemStorage(int)</code><br>
	 * <i>native declaration : cxcore.h:899</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMemStorage cvCreateMemStorage(int block_size);
	/**
	 * Creates a memory storage that will borrow memory blocks from parent storage<br>
	 * Original signature : <code>CvMemStorage* cvCreateChildMemStorage(CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:903</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvMemStorage cvCreateChildMemStorage(fr.prima.jna.opencv.cxtypes.CvMemStorage parent);
	/**
	 * Releases memory storage. All the children of a parent must be released before<br>
	 * the parent. A child storage returns all the blocks to parent when it is released<br>
	 * Original signature : <code>void cvReleaseMemStorage(CvMemStorage**)</code><br>
	 * <i>native declaration : cxcore.h:908</i><br>
	 * @deprecated use the safer method {@link #cvReleaseMemStorage(fr.prima.jna.opencv.cxtypes.CvMemStorage.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseMemStorage(com.sun.jna.ptr.PointerByReference storage);
	/**
	 * Releases memory storage. All the children of a parent must be released before<br>
	 * the parent. A child storage returns all the blocks to parent when it is released<br>
	 * Original signature : <code>void cvReleaseMemStorage(CvMemStorage**)</code><br>
	 * <i>native declaration : cxcore.h:908</i>
	 */
	void cvReleaseMemStorage(fr.prima.jna.opencv.cxtypes.CvMemStorage.ByReference storage[]);
	/**
	 * Clears memory storage. This is the only way(!!!) (besides cvRestoreMemStoragePos)<br>
	 * to reuse memory allocated for the storage - cvClearSeq,cvClearSet ...<br>
	 * do not free any memory.<br>
	 * A child storage returns all the blocks to the parent when it is cleared<br>
	 * Original signature : <code>void cvClearMemStorage(CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:915</i>
	 */
	void cvClearMemStorage(fr.prima.jna.opencv.cxtypes.CvMemStorage storage);
	/**
	 * Remember a storage "free memory" position<br>
	 * Original signature : <code>void cvSaveMemStoragePos(const CvMemStorage*, CvMemStoragePos*)</code><br>
	 * <i>native declaration : cxcore.h:918</i>
	 */
	void cvSaveMemStoragePos(fr.prima.jna.opencv.cxtypes.CvMemStorage storage, fr.prima.jna.opencv.cxtypes.CvMemStoragePos pos);
	/**
	 * Restore a storage "free memory" position<br>
	 * Original signature : <code>void cvRestoreMemStoragePos(CvMemStorage*, CvMemStoragePos*)</code><br>
	 * <i>native declaration : cxcore.h:921</i>
	 */
	void cvRestoreMemStoragePos(fr.prima.jna.opencv.cxtypes.CvMemStorage storage, fr.prima.jna.opencv.cxtypes.CvMemStoragePos pos);
	/**
	 * Allocates continuous buffer of the specified size in the storage<br>
	 * Original signature : <code>void* cvMemStorageAlloc(CvMemStorage*, size_t)</code><br>
	 * <i>native declaration : cxcore.h:924</i>
	 */
	com.sun.jna.Pointer cvMemStorageAlloc(fr.prima.jna.opencv.cxtypes.CvMemStorage storage, com.ochafik.lang.jnaerator.runtime.NativeSize size);
	/**
	 * Allocates string in memory storage<br>
	 * Original signature : <code>CvString cvMemStorageAllocString(CvMemStorage*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:927</i><br>
	 * @deprecated use the safer methods {@link #cvMemStorageAllocString(fr.prima.jna.opencv.cxtypes.CvMemStorage, java.lang.String, int)} and {@link #cvMemStorageAllocString(fr.prima.jna.opencv.cxtypes.CvMemStorage, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvString.ByValue cvMemStorageAllocString(fr.prima.jna.opencv.cxtypes.CvMemStorage storage, com.sun.jna.Pointer ptr, int len);
	/**
	 * Allocates string in memory storage<br>
	 * Original signature : <code>CvString cvMemStorageAllocString(CvMemStorage*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:927</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvString.ByValue cvMemStorageAllocString(fr.prima.jna.opencv.cxtypes.CvMemStorage storage, java.lang.String ptr, int len);
	/**
	 * Creates new empty sequence that will reside in the specified storage<br>
	 * Original signature : <code>CvSeq* cvCreateSeq(int, int, int, CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:931</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSeq cvCreateSeq(int seq_flags, int header_size, int elem_size, fr.prima.jna.opencv.cxtypes.CvMemStorage storage);
	/**
	 * Changes default size (granularity) of sequence blocks.<br>
	 * The default size is ~1Kbyte<br>
	 * Original signature : <code>void cvSetSeqBlockSize(CvSeq*, int)</code><br>
	 * <i>native declaration : cxcore.h:936</i>
	 */
	void cvSetSeqBlockSize(fr.prima.jna.opencv.cxtypes.CvSeq seq, int delta_elems);
	/**
	 * Adds new element to the end of sequence. Returns pointer to the element<br>
	 * Original signature : <code>char* cvSeqPush(CvSeq*, void*)</code><br>
	 * <i>native declaration : cxcore.h:940</i>
	 */
	com.sun.jna.Pointer cvSeqPush(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer element);
	/**
	 * Adds new element to the beginning of sequence. Returns pointer to it<br>
	 * Original signature : <code>char* cvSeqPushFront(CvSeq*, void*)</code><br>
	 * <i>native declaration : cxcore.h:944</i>
	 */
	com.sun.jna.Pointer cvSeqPushFront(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer element);
	/**
	 * Removes the last element from sequence and optionally saves it<br>
	 * Original signature : <code>void cvSeqPop(CvSeq*, void*)</code><br>
	 * <i>native declaration : cxcore.h:948</i>
	 */
	void cvSeqPop(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer element);
	/**
	 * Removes the first element from sequence and optioanally saves it<br>
	 * Original signature : <code>void cvSeqPopFront(CvSeq*, void*)</code><br>
	 * <i>native declaration : cxcore.h:952</i>
	 */
	void cvSeqPopFront(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer element);
	/**
	 * Adds several new elements to the end of sequence<br>
	 * Original signature : <code>void cvSeqPushMulti(CvSeq*, void*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:958</i>
	 */
	void cvSeqPushMulti(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer elements, int count, int in_front);
	/**
	 * Removes several elements from the end of sequence and optionally saves them<br>
	 * Original signature : <code>void cvSeqPopMulti(CvSeq*, void*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:962</i>
	 */
	void cvSeqPopMulti(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer elements, int count, int in_front);
	/**
	 * Inserts a new element in the middle of sequence.<br>
	 * cvSeqInsert(seq,0,elem) == cvSeqPushFront(seq,elem)<br>
	 * Original signature : <code>char* cvSeqInsert(CvSeq*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:967</i>
	 */
	com.sun.jna.Pointer cvSeqInsert(fr.prima.jna.opencv.cxtypes.CvSeq seq, int before_index, com.sun.jna.Pointer element);
	/**
	 * Removes specified sequence element<br>
	 * Original signature : <code>void cvSeqRemove(CvSeq*, int)</code><br>
	 * <i>native declaration : cxcore.h:971</i>
	 */
	void cvSeqRemove(fr.prima.jna.opencv.cxtypes.CvSeq seq, int index);
	/**
	 * Removes all the elements from the sequence. The freed memory<br>
	 * can be reused later only by the same sequence unless cvClearMemStorage<br>
	 * or cvRestoreMemStoragePos is called<br>
	 * Original signature : <code>void cvClearSeq(CvSeq*)</code><br>
	 * <i>native declaration : cxcore.h:977</i>
	 */
	void cvClearSeq(fr.prima.jna.opencv.cxtypes.CvSeq seq);
	/**
	 * Retrives pointer to specified sequence element.<br>
	 * Negative indices are supported and mean counting from the end<br>
	 * (e.g -1 means the last sequence element)<br>
	 * Original signature : <code>char* cvGetSeqElem(const CvSeq*, int)</code><br>
	 * <i>native declaration : cxcore.h:983</i>
	 */
	com.sun.jna.Pointer cvGetSeqElem(fr.prima.jna.opencv.cxtypes.CvSeq seq, int index);
	/**
	 * Calculates index of the specified sequence element.<br>
	 * Returns -1 if element does not belong to the sequence<br>
	 * Original signature : <code>int cvSeqElemIdx(const CvSeq*, const void*, CvSeqBlock**)</code><br>
	 * <i>native declaration : cxcore.h:987</i><br>
	 * @deprecated use the safer method {@link #cvSeqElemIdx(fr.prima.jna.opencv.cxtypes.CvSeq, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvSeqBlock.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int cvSeqElemIdx(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer element, com.sun.jna.ptr.PointerByReference block);
	/**
	 * Calculates index of the specified sequence element.<br>
	 * Returns -1 if element does not belong to the sequence<br>
	 * Original signature : <code>int cvSeqElemIdx(const CvSeq*, const void*, CvSeqBlock**)</code><br>
	 * <i>native declaration : cxcore.h:987</i>
	 */
	int cvSeqElemIdx(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer element, fr.prima.jna.opencv.cxtypes.CvSeqBlock.ByReference block[]);
	/**
	 * Initializes sequence writer. The new elements will be added to the end of sequence<br>
	 * Original signature : <code>void cvStartAppendToSeq(CvSeq*, CvSeqWriter*)</code><br>
	 * <i>native declaration : cxcore.h:991</i>
	 */
	void cvStartAppendToSeq(fr.prima.jna.opencv.cxtypes.CvSeq seq, fr.prima.jna.opencv.cxtypes.CvSeqWriter writer);
	/**
	 * Combination of cvCreateSeq and cvStartAppendToSeq<br>
	 * Original signature : <code>void cvStartWriteSeq(int, int, int, CvMemStorage*, CvSeqWriter*)</code><br>
	 * <i>native declaration : cxcore.h:995</i>
	 */
	void cvStartWriteSeq(int seq_flags, int header_size, int elem_size, fr.prima.jna.opencv.cxtypes.CvMemStorage storage, fr.prima.jna.opencv.cxtypes.CvSeqWriter writer);
	/**
	 * Closes sequence writer, updates sequence header and returns pointer<br>
	 * to the resultant sequence<br>
	 * (which may be useful if the sequence was created using cvStartWriteSeq))<br>
	 * Original signature : <code>CvSeq* cvEndWriteSeq(CvSeqWriter*)</code><br>
	 * <i>native declaration : cxcore.h:1003</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSeq cvEndWriteSeq(fr.prima.jna.opencv.cxtypes.CvSeqWriter writer);
	/**
	 * Updates sequence header. May be useful to get access to some of previously<br>
	 * written elements via cvGetSeqElem or sequence reader<br>
	 * Original signature : <code>void cvFlushSeqWriter(CvSeqWriter*)</code><br>
	 * <i>native declaration : cxcore.h:1008</i>
	 */
	void cvFlushSeqWriter(fr.prima.jna.opencv.cxtypes.CvSeqWriter writer);
	/**
	 * Initializes sequence reader.<br>
	 * The sequence can be read in forward or backward direction<br>
	 * Original signature : <code>void cvStartReadSeq(const CvSeq*, CvSeqReader*, int)</code><br>
	 * <i>native declaration : cxcore.h:1013</i>
	 */
	void cvStartReadSeq(fr.prima.jna.opencv.cxtypes.CvSeq seq, fr.prima.jna.opencv.cxtypes.CvSeqReader reader, int reverse);
	/**
	 * Returns current sequence reader position (currently observed sequence element)<br>
	 * Original signature : <code>int cvGetSeqReaderPos(CvSeqReader*)</code><br>
	 * <i>native declaration : cxcore.h:1018</i>
	 */
	int cvGetSeqReaderPos(fr.prima.jna.opencv.cxtypes.CvSeqReader reader);
	/**
	 * Changes sequence reader position. It may seek to an absolute or<br>
	 * to relative to the current position<br>
	 * Original signature : <code>void cvSetSeqReaderPos(CvSeqReader*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1023</i>
	 */
	void cvSetSeqReaderPos(fr.prima.jna.opencv.cxtypes.CvSeqReader reader, int index, int is_relative);
	/**
	 * Copies sequence content to a continuous piece of memory<br>
	 * Original signature : <code>void* cvCvtSeqToArray(const CvSeq*, void*, CvSlice)</code><br>
	 * <i>native declaration : cxcore.h:1027</i>
	 */
	com.sun.jna.Pointer cvCvtSeqToArray(fr.prima.jna.opencv.cxtypes.CvSeq seq, com.sun.jna.Pointer elements, fr.prima.jna.opencv.cxtypes.CvSlice.ByValue slice);
	/**
	 * Creates sequence header for array.<br>
	 * After that all the operations on sequences that do not alter the content<br>
	 * can be applied to the resultant sequence<br>
	 * Original signature : <code>CvSeq* cvMakeSeqHeaderForArray(int, int, int, void*, int, CvSeq*, CvSeqBlock*)</code><br>
	 * <i>native declaration : cxcore.h:1033</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSeq cvMakeSeqHeaderForArray(int seq_type, int header_size, int elem_size, com.sun.jna.Pointer elements, int total, fr.prima.jna.opencv.cxtypes.CvSeq seq, fr.prima.jna.opencv.cxtypes.CvSeqBlock block);
	/**
	 * Extracts sequence slice (with or without copying sequence elements)<br>
	 * Original signature : <code>CvSeq* cvSeqSlice(const CvSeq*, CvSlice, CvMemStorage*, int)</code><br>
	 * <i>native declaration : cxcore.h:1038</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSeq cvSeqSlice(fr.prima.jna.opencv.cxtypes.CvSeq seq, fr.prima.jna.opencv.cxtypes.CvSlice.ByValue slice, fr.prima.jna.opencv.cxtypes.CvMemStorage storage, int copy_data);
	/**
	 * Original signature : <code>CvSeq* cvCloneSeq(const CvSeq*, CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:1042</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSeq cvCloneSeq(fr.prima.jna.opencv.cxtypes.CvSeq seq, fr.prima.jna.opencv.cxtypes.CvMemStorage storage);
	/**
	 * Removes sequence slice<br>
	 * Original signature : <code>void cvSeqRemoveSlice(CvSeq*, CvSlice)</code><br>
	 * <i>native declaration : cxcore.h:1048</i>
	 */
	void cvSeqRemoveSlice(fr.prima.jna.opencv.cxtypes.CvSeq seq, fr.prima.jna.opencv.cxtypes.CvSlice.ByValue slice);
	/**
	 * Inserts a sequence or array into another sequence<br>
	 * Original signature : <code>void cvSeqInsertSlice(CvSeq*, int, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:1051</i>
	 */
	void cvSeqInsertSlice(fr.prima.jna.opencv.cxtypes.CvSeq seq, int before_index, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr from_arr);
	/**
	 * <i>native declaration : cxcore.h:1057</i><br>
	 * Conversion Error : CvCmpFunc
	 */
	/**
	 * <i>native declaration : cxcore.h:1060</i><br>
	 * Conversion Error : CvCmpFunc
	 */
	/**
	 * Reverses order of sequence elements in-place<br>
	 * Original signature : <code>void cvSeqInvert(CvSeq*)</code><br>
	 * <i>native declaration : cxcore.h:1065</i>
	 */
	void cvSeqInvert(fr.prima.jna.opencv.cxtypes.CvSeq seq);
	/**
	 * <i>native declaration : cxcore.h:1068</i><br>
	 * Conversion Error : CvCmpFunc
	 */
	/**
	 * Internal sequence functions ***********<br>
	 * Original signature : <code>void cvChangeSeqBlock(void*, int)</code><br>
	 * <i>native declaration : cxcore.h:1072</i>
	 */
	void cvChangeSeqBlock(com.sun.jna.Pointer reader, int direction);
	/**
	 * Original signature : <code>void cvCreateSeqBlock(CvSeqWriter*)</code><br>
	 * <i>native declaration : cxcore.h:1073</i>
	 */
	void cvCreateSeqBlock(fr.prima.jna.opencv.cxtypes.CvSeqWriter writer);
	/**
	 * Creates a new set<br>
	 * Original signature : <code>CvSet* cvCreateSet(int, int, int, CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:1077</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSet cvCreateSet(int set_flags, int header_size, int elem_size, fr.prima.jna.opencv.cxtypes.CvMemStorage storage);
	/**
	 * Adds new element to the set and returns pointer to it<br>
	 * Original signature : <code>int cvSetAdd(CvSet*, CvSetElem*, CvSetElem**)</code><br>
	 * <i>native declaration : cxcore.h:1081</i><br>
	 * @deprecated use the safer method {@link #cvSetAdd(fr.prima.jna.opencv.cxtypes.CvSet, fr.prima.jna.opencv.cxtypes.CvSetElem, fr.prima.jna.opencv.cxtypes.CvSetElem.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int cvSetAdd(fr.prima.jna.opencv.cxtypes.CvSet set_header, fr.prima.jna.opencv.cxtypes.CvSetElem elem, com.sun.jna.ptr.PointerByReference inserted_elem);
	/**
	 * Adds new element to the set and returns pointer to it<br>
	 * Original signature : <code>int cvSetAdd(CvSet*, CvSetElem*, CvSetElem**)</code><br>
	 * <i>native declaration : cxcore.h:1081</i>
	 */
	int cvSetAdd(fr.prima.jna.opencv.cxtypes.CvSet set_header, fr.prima.jna.opencv.cxtypes.CvSetElem elem, fr.prima.jna.opencv.cxtypes.CvSetElem.ByReference inserted_elem[]);
	/**
	 * Original signature : <code>CvSetElem* cvSetNew(CvSet*)</code><br>
	 * <i>native declaration : cxcore.h:1085</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSetElem cvSetNew(fr.prima.jna.opencv.cxtypes.CvSet set_header);
	/**
	 * Original signature : <code>void cvSetRemoveByPtr(CvSet*, void*)</code><br>
	 * <i>native declaration : cxcore.h:1100</i>
	 */
	void cvSetRemoveByPtr(fr.prima.jna.opencv.cxtypes.CvSet set_header, com.sun.jna.Pointer elem);
	/**
	 * Removes element from the set by its index<br>
	 * Original signature : <code>void cvSetRemove(CvSet*, int)</code><br>
	 * <i>native declaration : cxcore.h:1111</i>
	 */
	void cvSetRemove(fr.prima.jna.opencv.cxtypes.CvSet set_header, int index);
	/**
	 * Original signature : <code>CvSetElem* cvGetSetElem(const CvSet*, int)</code><br>
	 * <i>native declaration : cxcore.h:1115</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSetElem cvGetSetElem(fr.prima.jna.opencv.cxtypes.CvSet set_header, int index);
	/**
	 * Removes all the elements from the set<br>
	 * Original signature : <code>void cvClearSet(CvSet*)</code><br>
	 * <i>native declaration : cxcore.h:1122</i>
	 */
	void cvClearSet(fr.prima.jna.opencv.cxtypes.CvSet set_header);
	/**
	 * Creates new graph<br>
	 * Original signature : <code>CvGraph* cvCreateGraph(int, int, int, int, CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:1125</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvGraph cvCreateGraph(int graph_flags, int header_size, int vtx_size, int edge_size, fr.prima.jna.opencv.cxtypes.CvMemStorage storage);
	/**
	 * Adds new vertex to the graph<br>
	 * Original signature : <code>int cvGraphAddVtx(CvGraph*, const CvGraphVtx*, CvGraphVtx**)</code><br>
	 * <i>native declaration : cxcore.h:1130</i><br>
	 * @deprecated use the safer method {@link #cvGraphAddVtx(fr.prima.jna.opencv.cxtypes.CvGraph, fr.prima.jna.opencv.cxtypes.CvGraphVtx, fr.prima.jna.opencv.cxtypes.CvGraphVtx.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int cvGraphAddVtx(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx vtx, com.sun.jna.ptr.PointerByReference inserted_vtx);
	/**
	 * Adds new vertex to the graph<br>
	 * Original signature : <code>int cvGraphAddVtx(CvGraph*, const CvGraphVtx*, CvGraphVtx**)</code><br>
	 * <i>native declaration : cxcore.h:1130</i>
	 */
	int cvGraphAddVtx(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx vtx, fr.prima.jna.opencv.cxtypes.CvGraphVtx.ByReference inserted_vtx[]);
	/**
	 * Removes vertex from the graph together with all incident edges<br>
	 * Original signature : <code>int cvGraphRemoveVtx(CvGraph*, int)</code><br>
	 * <i>native declaration : cxcore.h:1135</i>
	 */
	int cvGraphRemoveVtx(fr.prima.jna.opencv.cxtypes.CvGraph graph, int index);
	/**
	 * Original signature : <code>int cvGraphRemoveVtxByPtr(CvGraph*, CvGraphVtx*)</code><br>
	 * <i>native declaration : cxcore.h:1136</i>
	 */
	int cvGraphRemoveVtxByPtr(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx vtx);
	/**
	 * Link two vertices specifed by indices or pointers if they<br>
	 * are not connected or return pointer to already existing edge<br>
	 * connecting the vertices.<br>
	 * Functions return 1 if a new edge was created, 0 otherwise<br>
	 * Original signature : <code>int cvGraphAddEdge(CvGraph*, int, int, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : cxcore.h:1143</i><br>
	 * @deprecated use the safer method {@link #cvGraphAddEdge(fr.prima.jna.opencv.cxtypes.CvGraph, int, int, fr.prima.jna.opencv.cxtypes.CvGraphEdge, fr.prima.jna.opencv.cxtypes.CvGraphEdge.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int cvGraphAddEdge(fr.prima.jna.opencv.cxtypes.CvGraph graph, int start_idx, int end_idx, fr.prima.jna.opencv.cxtypes.CvGraphEdge edge, com.sun.jna.ptr.PointerByReference inserted_edge);
	/**
	 * Link two vertices specifed by indices or pointers if they<br>
	 * are not connected or return pointer to already existing edge<br>
	 * connecting the vertices.<br>
	 * Functions return 1 if a new edge was created, 0 otherwise<br>
	 * Original signature : <code>int cvGraphAddEdge(CvGraph*, int, int, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : cxcore.h:1143</i>
	 */
	int cvGraphAddEdge(fr.prima.jna.opencv.cxtypes.CvGraph graph, int start_idx, int end_idx, fr.prima.jna.opencv.cxtypes.CvGraphEdge edge, fr.prima.jna.opencv.cxtypes.CvGraphEdge.ByReference inserted_edge[]);
	/**
	 * Original signature : <code>int cvGraphAddEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : cxcore.h:1148</i><br>
	 * @deprecated use the safer method {@link #cvGraphAddEdgeByPtr(fr.prima.jna.opencv.cxtypes.CvGraph, fr.prima.jna.opencv.cxtypes.CvGraphVtx, fr.prima.jna.opencv.cxtypes.CvGraphVtx, fr.prima.jna.opencv.cxtypes.CvGraphEdge, fr.prima.jna.opencv.cxtypes.CvGraphEdge.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int cvGraphAddEdgeByPtr(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx start_vtx, fr.prima.jna.opencv.cxtypes.CvGraphVtx end_vtx, fr.prima.jna.opencv.cxtypes.CvGraphEdge edge, com.sun.jna.ptr.PointerByReference inserted_edge);
	/**
	 * Original signature : <code>int cvGraphAddEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : cxcore.h:1148</i>
	 */
	int cvGraphAddEdgeByPtr(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx start_vtx, fr.prima.jna.opencv.cxtypes.CvGraphVtx end_vtx, fr.prima.jna.opencv.cxtypes.CvGraphEdge edge, fr.prima.jna.opencv.cxtypes.CvGraphEdge.ByReference inserted_edge[]);
	/**
	 * Remove edge connecting two vertices<br>
	 * Original signature : <code>void cvGraphRemoveEdge(CvGraph*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1154</i>
	 */
	void cvGraphRemoveEdge(fr.prima.jna.opencv.cxtypes.CvGraph graph, int start_idx, int end_idx);
	/**
	 * Original signature : <code>void cvGraphRemoveEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*)</code><br>
	 * <i>native declaration : cxcore.h:1155</i>
	 */
	void cvGraphRemoveEdgeByPtr(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx start_vtx, fr.prima.jna.opencv.cxtypes.CvGraphVtx end_vtx);
	/**
	 * Find edge connecting two vertices<br>
	 * Original signature : <code>CvGraphEdge* cvFindGraphEdge(const CvGraph*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1159</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvGraphEdge cvFindGraphEdge(fr.prima.jna.opencv.cxtypes.CvGraph graph, int start_idx, int end_idx);
	/**
	 * Original signature : <code>CvGraphEdge* cvFindGraphEdgeByPtr(const CvGraph*, const CvGraphVtx*, const CvGraphVtx*)</code><br>
	 * <i>native declaration : cxcore.h:1160</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvGraphEdge cvFindGraphEdgeByPtr(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx start_vtx, fr.prima.jna.opencv.cxtypes.CvGraphVtx end_vtx);
	/**
	 * Remove all vertices and edges from the graph<br>
	 * Original signature : <code>void cvClearGraph(CvGraph*)</code><br>
	 * <i>native declaration : cxcore.h:1167</i>
	 */
	void cvClearGraph(fr.prima.jna.opencv.cxtypes.CvGraph graph);
	/**
	 * Count number of edges incident to the vertex<br>
	 * Original signature : <code>int cvGraphVtxDegree(const CvGraph*, int)</code><br>
	 * <i>native declaration : cxcore.h:1171</i>
	 */
	int cvGraphVtxDegree(fr.prima.jna.opencv.cxtypes.CvGraph graph, int vtx_idx);
	/**
	 * Original signature : <code>int cvGraphVtxDegreeByPtr(const CvGraph*, const CvGraphVtx*)</code><br>
	 * <i>native declaration : cxcore.h:1172</i>
	 */
	int cvGraphVtxDegreeByPtr(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx vtx);
	/**
	 * Creates new graph scanner.<br>
	 * Original signature : <code>CvGraphScanner* cvCreateGraphScanner(CvGraph*, CvGraphVtx*, int)</code><br>
	 * <i>native declaration : cxcore.h:1222</i>
	 */
	fr.prima.jna.opencv.cxcore.CvGraphScanner cvCreateGraphScanner(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvGraphVtx vtx, int mask);
	/**
	 * Releases graph scanner.<br>
	 * Original signature : <code>void cvReleaseGraphScanner(CvGraphScanner**)</code><br>
	 * <i>native declaration : cxcore.h:1227</i><br>
	 * @deprecated use the safer method {@link #cvReleaseGraphScanner(fr.prima.jna.opencv.cxcore.CvGraphScanner.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseGraphScanner(com.sun.jna.ptr.PointerByReference scanner);
	/**
	 * Releases graph scanner.<br>
	 * Original signature : <code>void cvReleaseGraphScanner(CvGraphScanner**)</code><br>
	 * <i>native declaration : cxcore.h:1227</i>
	 */
	void cvReleaseGraphScanner(fr.prima.jna.opencv.cxcore.CvGraphScanner.ByReference scanner[]);
	/**
	 * Get next graph element<br>
	 * Original signature : <code>int cvNextGraphItem(CvGraphScanner*)</code><br>
	 * <i>native declaration : cxcore.h:1230</i>
	 */
	int cvNextGraphItem(fr.prima.jna.opencv.cxcore.CvGraphScanner scanner);
	/**
	 * Creates a copy of graph<br>
	 * Original signature : <code>CvGraph* cvCloneGraph(const CvGraph*, CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:1233</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvGraph cvCloneGraph(fr.prima.jna.opencv.cxtypes.CvGraph graph, fr.prima.jna.opencv.cxtypes.CvMemStorage storage);
	/**
	 * Draws 4-connected, 8-connected or antialiased line segment connecting two points<br>
	 * Original signature : <code>void cvLine(CvArr*, CvPoint, CvPoint, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1255</i>
	 */
	void cvLine(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue pt1, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue pt2, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws a rectangle given two opposite corners of the rectangle (pt1 & pt2),<br>
	 * if thickness<0 (e.g. thickness == CV_FILLED), the filled box is drawn<br>
	 * Original signature : <code>void cvRectangle(CvArr*, CvPoint, CvPoint, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1261</i>
	 */
	void cvRectangle(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue pt1, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue pt2, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws a circle with specified center and radius.<br>
	 * Thickness works in the same way as with cvRectangle<br>
	 * Original signature : <code>void cvCircle(CvArr*, CvPoint, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1268</i>
	 */
	void cvCircle(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue center, int radius, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws ellipse outline, filled ellipse, elliptic arc or filled elliptic sector,<br>
	 * depending on <thickness>, <start_angle> and <end_angle> parameters. The resultant figure<br>
	 * is rotated by <angle>. All the angles are in degrees<br>
	 * Original signature : <code>void cvEllipse(CvArr*, CvPoint, CvSize, double, double, double, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1275</i>
	 */
	void cvEllipse(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue center, fr.prima.jna.opencv.cxtypes.CvSize.ByValue axes, double angle, double start_angle, double end_angle, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Original signature : <code>void cvEllipseBox(CvArr*, CvBox2D, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1280</i>
	 */
	void cvEllipseBox(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvBox2D.ByValue box, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Fills convex or monotonous polygon.<br>
	 * Original signature : <code>void cvFillConvexPoly(CvArr*, CvPoint*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1293</i>
	 */
	void cvFillConvexPoly(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint pts, int npts, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Fills an area bounded by one or more arbitrary polygons<br>
	 * Original signature : <code>void cvFillPoly(CvArr*, CvPoint**, int*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1297</i><br>
	 * @deprecated use the safer methods {@link #cvFillPoly(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference[], java.nio.IntBuffer, int, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue, int, int)} and {@link #cvFillPoly(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference[], com.sun.jna.ptr.IntByReference, int, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue, int, int)} instead
	 */
	@java.lang.Deprecated
	void cvFillPoly(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, com.sun.jna.ptr.PointerByReference pts, com.sun.jna.ptr.IntByReference npts, int contours, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Fills an area bounded by one or more arbitrary polygons<br>
	 * Original signature : <code>void cvFillPoly(CvArr*, CvPoint**, int*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1297</i>
	 */
	void cvFillPoly(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference pts[], java.nio.IntBuffer npts, int contours, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Fills an area bounded by one or more arbitrary polygons<br>
	 * Original signature : <code>void cvFillPoly(CvArr*, CvPoint**, int*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1297</i>
	 */
	void cvFillPoly(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference pts[], com.sun.jna.ptr.IntByReference npts, int contours, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Draws one or more polygonal curves<br>
	 * Original signature : <code>void cvPolyLine(CvArr*, CvPoint**, int*, int, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1301</i><br>
	 * @deprecated use the safer methods {@link #cvPolyLine(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference[], java.nio.IntBuffer, int, int, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue, int, int, int)} and {@link #cvPolyLine(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference[], com.sun.jna.ptr.IntByReference, int, int, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue, int, int, int)} instead
	 */
	@java.lang.Deprecated
	void cvPolyLine(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, com.sun.jna.ptr.PointerByReference pts, com.sun.jna.ptr.IntByReference npts, int contours, int is_closed, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws one or more polygonal curves<br>
	 * Original signature : <code>void cvPolyLine(CvArr*, CvPoint**, int*, int, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1301</i>
	 */
	void cvPolyLine(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference pts[], java.nio.IntBuffer npts, int contours, int is_closed, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws one or more polygonal curves<br>
	 * Original signature : <code>void cvPolyLine(CvArr*, CvPoint**, int*, int, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1301</i>
	 */
	void cvPolyLine(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvPoint.ByReference pts[], com.sun.jna.ptr.IntByReference npts, int contours, int is_closed, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Clips the line segment connecting *pt1 and *pt2<br>
	 * by the rectangular window<br>
	 * (0<=x<img_size.width, 0<=y<img_size.height).<br>
	 * Original signature : <code>int cvClipLine(CvSize, CvPoint*, CvPoint*)</code><br>
	 * <i>native declaration : cxcore.h:1314</i>
	 */
	int cvClipLine(fr.prima.jna.opencv.cxtypes.CvSize.ByValue img_size, fr.prima.jna.opencv.cxtypes.CvPoint pt1, fr.prima.jna.opencv.cxtypes.CvPoint pt2);
	/**
	 * Initializes line iterator. Initially, line_iterator->ptr will point<br>
	 * to pt1 (or pt2, see left_to_right description) location in the image.<br>
	 * Returns the number of pixels on the line between the ending points.<br>
	 * Original signature : <code>int cvInitLineIterator(const CvArr*, CvPoint, CvPoint, CvLineIterator*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1319</i>
	 */
	int cvInitLineIterator(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr image, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue pt1, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue pt2, fr.prima.jna.opencv.cxtypes.CvLineIterator line_iterator, int connectivity, int left_to_right);
	/**
	 * Initializes font structure used further in cvPutText<br>
	 * Original signature : <code>void cvInitFont(CvFont*, int, double, double, double, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1366</i>
	 */
	void cvInitFont(fr.prima.jna.opencv.cxcore.CvFont font, int font_face, double hscale, double vscale, double shear, int thickness, int line_type);
	/**
	 * Original signature : <code>CvFont cvFont(double, int)</code><br>
	 * <i>native declaration : cxcore.h:1372</i>
	 */
	fr.prima.jna.opencv.cxcore.CvFont.ByValue cvFont(double scale, int thickness);
	/**
	 * Renders text stroke with specified font and color at specified location.<br>
	 * CvFont should be initialized with cvInitFont<br>
	 * Original signature : <code>void cvPutText(CvArr*, const char*, CvPoint, const CvFont*, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:1381</i><br>
	 * @deprecated use the safer methods {@link #cvPutText(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, java.lang.String, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue, fr.prima.jna.opencv.cxcore.CvFont, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue)} and {@link #cvPutText(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue, fr.prima.jna.opencv.cxcore.CvFont, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue)} instead
	 */
	@java.lang.Deprecated
	void cvPutText(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, com.sun.jna.Pointer text, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue org, fr.prima.jna.opencv.cxcore.CvFont font, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color);
	/**
	 * Renders text stroke with specified font and color at specified location.<br>
	 * CvFont should be initialized with cvInitFont<br>
	 * Original signature : <code>void cvPutText(CvArr*, const char*, CvPoint, const CvFont*, CvScalar)</code><br>
	 * <i>native declaration : cxcore.h:1381</i>
	 */
	void cvPutText(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, java.lang.String text, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue org, fr.prima.jna.opencv.cxcore.CvFont font, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue color);
	/**
	 * Calculates bounding box of text stroke (useful for alignment)<br>
	 * Original signature : <code>void cvGetTextSize(const char*, const CvFont*, CvSize*, int*)</code><br>
	 * <i>native declaration : cxcore.h:1385</i><br>
	 * @deprecated use the safer methods {@link #cvGetTextSize(java.lang.String, fr.prima.jna.opencv.cxcore.CvFont, fr.prima.jna.opencv.cxtypes.CvSize, java.nio.IntBuffer)} and {@link #cvGetTextSize(com.sun.jna.Pointer, fr.prima.jna.opencv.cxcore.CvFont, fr.prima.jna.opencv.cxtypes.CvSize, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	void cvGetTextSize(com.sun.jna.Pointer text_string, fr.prima.jna.opencv.cxcore.CvFont font, fr.prima.jna.opencv.cxtypes.CvSize text_size, com.sun.jna.ptr.IntByReference baseline);
	/**
	 * Calculates bounding box of text stroke (useful for alignment)<br>
	 * Original signature : <code>void cvGetTextSize(const char*, const CvFont*, CvSize*, int*)</code><br>
	 * <i>native declaration : cxcore.h:1385</i>
	 */
	void cvGetTextSize(java.lang.String text_string, fr.prima.jna.opencv.cxcore.CvFont font, fr.prima.jna.opencv.cxtypes.CvSize text_size, java.nio.IntBuffer baseline);
	/**
	 * Unpacks color value, if arrtype is CV_8UC?, <color> is treated as<br>
	 * packed color value, otherwise the first channels (depending on arrtype)<br>
	 * of destination scalar are set to the same value = <color><br>
	 * Original signature : <code>CvScalar cvColorToScalar(double, int)</code><br>
	 * <i>native declaration : cxcore.h:1391</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvScalar.ByValue cvColorToScalar(double packed_color, int arrtype);
	/**
	 * Returns the polygon points which make up the given ellipse.  The ellipse is define by<br>
	 * the box of size 'axes' rotated 'angle' around the 'center'.  A partial sweep<br>
	 * of the ellipse arc can be done by spcifying arc_start and arc_end to be something<br>
	 * other than 0 and 360, respectively.  The input array 'pts' must be large enough to<br>
	 * hold the result.  The total number of points stored into 'pts' is returned by this<br>
	 * function.<br>
	 * Original signature : <code>int cvEllipse2Poly(CvPoint, CvSize, int, int, int, CvPoint*, int)</code><br>
	 * <i>native declaration : cxcore.h:1399</i>
	 */
	int cvEllipse2Poly(fr.prima.jna.opencv.cxtypes.CvPoint.ByValue center, fr.prima.jna.opencv.cxtypes.CvSize.ByValue axes, int angle, int arc_start, int arc_end, fr.prima.jna.opencv.cxtypes.CvPoint pts, int delta);
	/**
	 * Draws contour outlines or filled interiors on the image<br>
	 * Original signature : <code>void cvDrawContours(CvArr*, CvSeq*, CvScalar, CvScalar, int, int, int, CvPoint)</code><br>
	 * <i>native declaration : cxcore.h:1403</i>
	 */
	void cvDrawContours(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr img, fr.prima.jna.opencv.cxtypes.CvSeq contour, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue external_color, fr.prima.jna.opencv.cxtypes.CvScalar.ByValue hole_color, int max_level, int thickness, int line_type, fr.prima.jna.opencv.cxtypes.CvPoint.ByValue offset);
	/**
	 * Does look-up transformation. Elements of the source array<br>
	 * (that should be 8uC1 or 8sC1) are used as indexes in lutarr 256-element table<br>
	 * Original signature : <code>void cvLUT(const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : cxcore.h:1411</i>
	 */
	void cvLUT(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr src, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr dst, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr lut);
	/**
	 * Original signature : <code>void cvInitTreeNodeIterator(CvTreeNodeIterator*, const void*, int)</code><br>
	 * <i>native declaration : cxcore.h:1423</i>
	 */
	void cvInitTreeNodeIterator(fr.prima.jna.opencv.cxcore.CvTreeNodeIterator tree_iterator, com.sun.jna.Pointer first, int max_level);
	/**
	 * Original signature : <code>void* cvNextTreeNode(CvTreeNodeIterator*)</code><br>
	 * <i>native declaration : cxcore.h:1425</i>
	 */
	com.sun.jna.Pointer cvNextTreeNode(fr.prima.jna.opencv.cxcore.CvTreeNodeIterator tree_iterator);
	/**
	 * Original signature : <code>void* cvPrevTreeNode(CvTreeNodeIterator*)</code><br>
	 * <i>native declaration : cxcore.h:1426</i>
	 */
	com.sun.jna.Pointer cvPrevTreeNode(fr.prima.jna.opencv.cxcore.CvTreeNodeIterator tree_iterator);
	/**
	 * Inserts sequence into tree with specified "parent" sequence.<br>
	 * If parent is equal to frame (e.g. the most external contour),<br>
	 * then added contour will have null pointer to parent.<br>
	 * Original signature : <code>void cvInsertNodeIntoTree(void*, void*, void*)</code><br>
	 * <i>native declaration : cxcore.h:1431</i>
	 */
	void cvInsertNodeIntoTree(com.sun.jna.Pointer node, com.sun.jna.Pointer parent, com.sun.jna.Pointer frame);
	/**
	 * Removes contour from tree (together with the contour children).<br>
	 * Original signature : <code>void cvRemoveNodeFromTree(void*, void*)</code><br>
	 * <i>native declaration : cxcore.h:1434</i>
	 */
	void cvRemoveNodeFromTree(com.sun.jna.Pointer node, com.sun.jna.Pointer frame);
	/**
	 * Gathers pointers to all the sequences,<br>
	 * accessible from the <first>, to the single sequence<br>
	 * Original signature : <code>CvSeq* cvTreeToNodeSeq(const void*, int, CvMemStorage*)</code><br>
	 * <i>native declaration : cxcore.h:1438</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvSeq cvTreeToNodeSeq(com.sun.jna.Pointer first, int header_size, fr.prima.jna.opencv.cxtypes.CvMemStorage storage);
	/**
	 * The function implements the K-means algorithm for clustering an array of sample<br>
	 * vectors in a specified number of classes<br>
	 * Original signature : <code>void cvKMeans2(const CvArr*, int, CvArr*, CvTermCriteria)</code><br>
	 * <i>native declaration : cxcore.h:1443</i>
	 */
	void cvKMeans2(fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr samples, int cluster_count, fr.prima.jna.opencv.highgui.HighguiLibrary.CvArr labels, fr.prima.jna.opencv.cxtypes.CvTermCriteria.ByValue termcrit);
	/**
	 * Add the function pointers table with associated information to the IPP primitives list<br>
	 * Original signature : <code>int cvRegisterModule(const CvModuleInfo*)</code><br>
	 * <i>native declaration : cxcore.h:1451</i>
	 */
	int cvRegisterModule(fr.prima.jna.opencv.cxtypes.CvModuleInfo module_info);
	/**
	 * Loads optimized functions from IPP, MKL etc. or switches back to pure C code<br>
	 * Original signature : <code>int cvUseOptimized(int)</code><br>
	 * <i>native declaration : cxcore.h:1454</i>
	 */
	int cvUseOptimized(int on_off);
	/**
	 * Retrieves information about the registered modules and loaded optimized plugins<br>
	 * Original signature : <code>void cvGetModuleInfo(const char*, const char**, const char**)</code><br>
	 * <i>native declaration : cxcore.h:1457</i><br>
	 * @deprecated use the safer methods {@link #cvGetModuleInfo(java.lang.String, java.lang.String[], java.lang.String[])} and {@link #cvGetModuleInfo(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	void cvGetModuleInfo(com.sun.jna.Pointer module_name, com.sun.jna.ptr.PointerByReference version, com.sun.jna.ptr.PointerByReference loaded_addon_plugins);
	/**
	 * Retrieves information about the registered modules and loaded optimized plugins<br>
	 * Original signature : <code>void cvGetModuleInfo(const char*, const char**, const char**)</code><br>
	 * <i>native declaration : cxcore.h:1457</i>
	 */
	void cvGetModuleInfo(java.lang.String module_name, java.lang.String version[], java.lang.String loaded_addon_plugins[]);
	/**
	 * Get current OpenCV error status<br>
	 * Original signature : <code>int cvGetErrStatus()</code><br>
	 * <i>native declaration : cxcore.h:1462</i>
	 */
	int cvGetErrStatus();
	/**
	 * Sets error status silently<br>
	 * Original signature : <code>void cvSetErrStatus(int)</code><br>
	 * <i>native declaration : cxcore.h:1465</i>
	 */
	void cvSetErrStatus(int status);
	/**
	 * Retrives current error processing mode<br>
	 * Original signature : <code>int cvGetErrMode()</code><br>
	 * <i>native declaration : cxcore.h:1472</i>
	 */
	int cvGetErrMode();
	/**
	 * Sets error processing mode, returns previously used mode<br>
	 * Original signature : <code>int cvSetErrMode(int)</code><br>
	 * <i>native declaration : cxcore.h:1475</i>
	 */
	int cvSetErrMode(int mode);
	/**
	 * Sets error status and performs some additonal actions (displaying message box,<br>
	 * writing message to stderr, terminating application etc.)<br>
	 * depending on the current error mode<br>
	 * Original signature : <code>void cvError(int, const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1480</i><br>
	 * @deprecated use the safer methods {@link #cvError(int, java.lang.String, java.lang.String, java.lang.String, int)} and {@link #cvError(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	void cvError(int status, com.sun.jna.Pointer func_name, com.sun.jna.Pointer err_msg, com.sun.jna.Pointer file_name, int line);
	/**
	 * Sets error status and performs some additonal actions (displaying message box,<br>
	 * writing message to stderr, terminating application etc.)<br>
	 * depending on the current error mode<br>
	 * Original signature : <code>void cvError(int, const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1480</i>
	 */
	void cvError(int status, java.lang.String func_name, java.lang.String err_msg, java.lang.String file_name, int line);
	/**
	 * Retrieves textual description of the error given its code<br>
	 * Original signature : <code>char* cvErrorStr(int)</code><br>
	 * <i>native declaration : cxcore.h:1484</i>
	 */
	java.lang.String cvErrorStr(int status);
	/**
	 * Retrieves detailed information about the last error occured<br>
	 * Original signature : <code>int cvGetErrInfo(const char**, const char**, const char**, int*)</code><br>
	 * <i>native declaration : cxcore.h:1487</i><br>
	 * @deprecated use the safer methods {@link #cvGetErrInfo(java.lang.String[], java.lang.String[], java.lang.String[], java.nio.IntBuffer)} and {@link #cvGetErrInfo(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int cvGetErrInfo(com.sun.jna.ptr.PointerByReference errcode_desc, com.sun.jna.ptr.PointerByReference description, com.sun.jna.ptr.PointerByReference filename, com.sun.jna.ptr.IntByReference line);
	/**
	 * Retrieves detailed information about the last error occured<br>
	 * Original signature : <code>int cvGetErrInfo(const char**, const char**, const char**, int*)</code><br>
	 * <i>native declaration : cxcore.h:1487</i>
	 */
	int cvGetErrInfo(java.lang.String errcode_desc[], java.lang.String description[], java.lang.String filename[], java.nio.IntBuffer line);
	/**
	 * Maps IPP error codes to the counterparts from OpenCV<br>
	 * Original signature : <code>int cvErrorFromIppStatus(int)</code><br>
	 * <i>native declaration : cxcore.h:1491</i>
	 */
	int cvErrorFromIppStatus(int ipp_status);
	/**
	 * <i>native declaration : cxcore.h:1497</i><br>
	 * Conversion Error : CvErrorCallback
	 */
	/**
	 * Output to:<br>
	 * cvNulDevReport - nothing<br>
	 * cvStdErrReport - console(fprintf(stderr,...))<br>
	 * cvGuiBoxReport - MessageBox(WIN32)<br>
	 * Original signature : <code>int cvNulDevReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:1507</i><br>
	 * @deprecated use the safer methods {@link #cvNulDevReport(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer)} and {@link #cvNulDevReport(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	int cvNulDevReport(int status, com.sun.jna.Pointer func_name, com.sun.jna.Pointer err_msg, com.sun.jna.Pointer file_name, int line, com.sun.jna.Pointer userdata);
	/**
	 * Output to:<br>
	 * cvNulDevReport - nothing<br>
	 * cvStdErrReport - console(fprintf(stderr,...))<br>
	 * cvGuiBoxReport - MessageBox(WIN32)<br>
	 * Original signature : <code>int cvNulDevReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:1507</i>
	 */
	int cvNulDevReport(int status, java.lang.String func_name, java.lang.String err_msg, java.lang.String file_name, int line, com.sun.jna.Pointer userdata);
	/**
	 * Original signature : <code>int cvStdErrReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:1510</i><br>
	 * @deprecated use the safer methods {@link #cvStdErrReport(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer)} and {@link #cvStdErrReport(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	int cvStdErrReport(int status, com.sun.jna.Pointer func_name, com.sun.jna.Pointer err_msg, com.sun.jna.Pointer file_name, int line, com.sun.jna.Pointer userdata);
	/**
	 * Original signature : <code>int cvStdErrReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:1510</i>
	 */
	int cvStdErrReport(int status, java.lang.String func_name, java.lang.String err_msg, java.lang.String file_name, int line, com.sun.jna.Pointer userdata);
	/**
	 * Original signature : <code>int cvGuiBoxReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:1513</i><br>
	 * @deprecated use the safer methods {@link #cvGuiBoxReport(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer)} and {@link #cvGuiBoxReport(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	int cvGuiBoxReport(int status, com.sun.jna.Pointer func_name, com.sun.jna.Pointer err_msg, com.sun.jna.Pointer file_name, int line, com.sun.jna.Pointer userdata);
	/**
	 * Original signature : <code>int cvGuiBoxReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : cxcore.h:1513</i>
	 */
	int cvGuiBoxReport(int status, java.lang.String func_name, java.lang.String err_msg, java.lang.String file_name, int line, com.sun.jna.Pointer userdata);
	/**
	 * <i>native declaration : cxcore.h:1521</i><br>
	 * Conversion Error : CvAllocFunc
	 */
	/**
	 * <i>native declaration : cxcore.h:1535</i><br>
	 * Conversion Error : Cv_iplCreateImageHeader
	 */
	/**
	 * opens existing or creates new file storage<br>
	 * Original signature : <code>CvFileStorage* cvOpenFileStorage(const char*, CvMemStorage*, int)</code><br>
	 * <i>native declaration : cxcore.h:1552</i><br>
	 * @deprecated use the safer methods {@link #cvOpenFileStorage(java.lang.String, fr.prima.jna.opencv.cxtypes.CvMemStorage, int)} and {@link #cvOpenFileStorage(com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvMemStorage, int)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage cvOpenFileStorage(com.sun.jna.Pointer filename, fr.prima.jna.opencv.cxtypes.CvMemStorage memstorage, int flags);
	/**
	 * opens existing or creates new file storage<br>
	 * Original signature : <code>CvFileStorage* cvOpenFileStorage(const char*, CvMemStorage*, int)</code><br>
	 * <i>native declaration : cxcore.h:1552</i>
	 */
	fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage cvOpenFileStorage(java.lang.String filename, fr.prima.jna.opencv.cxtypes.CvMemStorage memstorage, int flags);
	/**
	 * closes file storage and deallocates buffers<br>
	 * Original signature : <code>void cvReleaseFileStorage(CvFileStorage**)</code><br>
	 * <i>native declaration : cxcore.h:1557</i><br>
	 * @deprecated use the safer method {@link #cvReleaseFileStorage(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage[])} instead
	 */
	@java.lang.Deprecated
	void cvReleaseFileStorage(com.sun.jna.ptr.PointerByReference fs);
	/**
	 * closes file storage and deallocates buffers<br>
	 * Original signature : <code>void cvReleaseFileStorage(CvFileStorage**)</code><br>
	 * <i>native declaration : cxcore.h:1557</i>
	 */
	void cvReleaseFileStorage(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs[]);
	/**
	 * returns attribute value or 0 (NULL) if there is no such attribute<br>
	 * Original signature : <code>char* cvAttrValue(const CvAttrList*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1560</i><br>
	 * @deprecated use the safer methods {@link #cvAttrValue(fr.prima.jna.opencv.cxtypes.CvAttrList, java.lang.String)} and {@link #cvAttrValue(fr.prima.jna.opencv.cxtypes.CvAttrList, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	java.lang.String cvAttrValue(fr.prima.jna.opencv.cxtypes.CvAttrList attr, com.sun.jna.Pointer attr_name);
	/**
	 * returns attribute value or 0 (NULL) if there is no such attribute<br>
	 * Original signature : <code>char* cvAttrValue(const CvAttrList*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1560</i>
	 */
	java.lang.String cvAttrValue(fr.prima.jna.opencv.cxtypes.CvAttrList attr, java.lang.String attr_name);
	/**
	 * starts writing compound structure (map or sequence)<br>
	 * Original signature : <code>void cvStartWriteStruct(CvFileStorage*, const char*, int, const char*, CvAttrList)</code><br>
	 * <i>native declaration : cxcore.h:1563</i><br>
	 * @deprecated use the safer methods {@link #cvStartWriteStruct(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int, java.lang.String, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue)} and {@link #cvStartWriteStruct(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue)} instead
	 */
	@java.lang.Deprecated
	void cvStartWriteStruct(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer name, int struct_flags, com.sun.jna.Pointer type_name, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue attributes);
	/**
	 * starts writing compound structure (map or sequence)<br>
	 * Original signature : <code>void cvStartWriteStruct(CvFileStorage*, const char*, int, const char*, CvAttrList)</code><br>
	 * <i>native declaration : cxcore.h:1563</i>
	 */
	void cvStartWriteStruct(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String name, int struct_flags, java.lang.String type_name, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue attributes);
	/**
	 * finishes writing compound structure<br>
	 * Original signature : <code>void cvEndWriteStruct(CvFileStorage*)</code><br>
	 * <i>native declaration : cxcore.h:1568</i>
	 */
	void cvEndWriteStruct(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs);
	/**
	 * writes an integer<br>
	 * Original signature : <code>void cvWriteInt(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1571</i><br>
	 * @deprecated use the safer methods {@link #cvWriteInt(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int)} and {@link #cvWriteInt(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	void cvWriteInt(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer name, int value);
	/**
	 * writes an integer<br>
	 * Original signature : <code>void cvWriteInt(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1571</i>
	 */
	void cvWriteInt(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String name, int value);
	/**
	 * writes a floating-point number<br>
	 * Original signature : <code>void cvWriteReal(CvFileStorage*, const char*, double)</code><br>
	 * <i>native declaration : cxcore.h:1574</i><br>
	 * @deprecated use the safer methods {@link #cvWriteReal(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, double)} and {@link #cvWriteReal(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, double)} instead
	 */
	@java.lang.Deprecated
	void cvWriteReal(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer name, double value);
	/**
	 * writes a floating-point number<br>
	 * Original signature : <code>void cvWriteReal(CvFileStorage*, const char*, double)</code><br>
	 * <i>native declaration : cxcore.h:1574</i>
	 */
	void cvWriteReal(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String name, double value);
	/**
	 * writes a string<br>
	 * Original signature : <code>void cvWriteString(CvFileStorage*, const char*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1577</i><br>
	 * @deprecated use the safer methods {@link #cvWriteString(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, java.lang.String, int)} and {@link #cvWriteString(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	void cvWriteString(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer name, com.sun.jna.Pointer str, int quote);
	/**
	 * writes a string<br>
	 * Original signature : <code>void cvWriteString(CvFileStorage*, const char*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1577</i>
	 */
	void cvWriteString(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String name, java.lang.String str, int quote);
	/**
	 * writes a comment<br>
	 * Original signature : <code>void cvWriteComment(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1581</i><br>
	 * @deprecated use the safer methods {@link #cvWriteComment(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int)} and {@link #cvWriteComment(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	void cvWriteComment(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer comment, int eol_comment);
	/**
	 * writes a comment<br>
	 * Original signature : <code>void cvWriteComment(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1581</i>
	 */
	void cvWriteComment(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String comment, int eol_comment);
	/**
	 * writes instance of a standard type (matrix, image, sequence, graph etc.)<br>
	 * or user-defined type<br>
	 * Original signature : <code>void cvWrite(CvFileStorage*, const char*, const void*, CvAttrList)</code><br>
	 * <i>native declaration : cxcore.h:1586</i><br>
	 * @deprecated use the safer methods {@link #cvWrite(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue)} and {@link #cvWrite(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue)} instead
	 */
	@java.lang.Deprecated
	void cvWrite(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer name, com.sun.jna.Pointer ptr, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue attributes);
	/**
	 * writes instance of a standard type (matrix, image, sequence, graph etc.)<br>
	 * or user-defined type<br>
	 * Original signature : <code>void cvWrite(CvFileStorage*, const char*, const void*, CvAttrList)</code><br>
	 * <i>native declaration : cxcore.h:1586</i>
	 */
	void cvWrite(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String name, com.sun.jna.Pointer ptr, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue attributes);
	/**
	 * starts the next stream<br>
	 * Original signature : <code>void cvStartNextStream(CvFileStorage*)</code><br>
	 * <i>native declaration : cxcore.h:1590</i>
	 */
	void cvStartNextStream(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs);
	/**
	 * helper function: writes multiple integer or floating-point numbers<br>
	 * Original signature : <code>void cvWriteRawData(CvFileStorage*, const void*, int, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1593</i><br>
	 * @deprecated use the safer methods {@link #cvWriteRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, java.lang.String)} and {@link #cvWriteRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void cvWriteRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer src, int len, com.sun.jna.Pointer dt);
	/**
	 * helper function: writes multiple integer or floating-point numbers<br>
	 * Original signature : <code>void cvWriteRawData(CvFileStorage*, const void*, int, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1593</i>
	 */
	void cvWriteRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer src, int len, java.lang.String dt);
	/**
	 * returns the hash entry corresponding to the specified literal key string or 0<br>
	 * if there is no such a key in the storage<br>
	 * Original signature : <code>CvStringHashNode* cvGetHashedKey(CvFileStorage*, const char*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1598</i><br>
	 * @deprecated use the safer methods {@link #cvGetHashedKey(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int, int)} and {@link #cvGetHashedKey(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, int)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvStringHashNode cvGetHashedKey(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer name, int len, int create_missing);
	/**
	 * returns the hash entry corresponding to the specified literal key string or 0<br>
	 * if there is no such a key in the storage<br>
	 * Original signature : <code>CvStringHashNode* cvGetHashedKey(CvFileStorage*, const char*, int, int)</code><br>
	 * <i>native declaration : cxcore.h:1598</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvStringHashNode cvGetHashedKey(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String name, int len, int create_missing);
	/**
	 * returns file node with the specified key within the specified map<br>
	 * (collection of named nodes)<br>
	 * Original signature : <code>CvFileNode* cvGetRootFileNode(const CvFileStorage*, int)</code><br>
	 * <i>native declaration : cxcore.h:1604</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvFileNode cvGetRootFileNode(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, int stream_index);
	/**
	 * returns file node with the specified key within the specified map<br>
	 * (collection of named nodes)<br>
	 * Original signature : <code>CvFileNode* cvGetFileNode(CvFileStorage*, CvFileNode*, const CvStringHashNode*, int)</code><br>
	 * <i>native declaration : cxcore.h:1609</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvFileNode cvGetFileNode(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, fr.prima.jna.opencv.cxtypes.CvStringHashNode key, int create_missing);
	/**
	 * this is a slower version of cvGetFileNode that takes the key as a literal string<br>
	 * Original signature : <code>CvFileNode* cvGetFileNodeByName(const CvFileStorage*, const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1614</i><br>
	 * @deprecated use the safer methods {@link #cvGetFileNodeByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, java.lang.String)} and {@link #cvGetFileNodeByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvFileNode cvGetFileNodeByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, com.sun.jna.Pointer name);
	/**
	 * this is a slower version of cvGetFileNode that takes the key as a literal string<br>
	 * Original signature : <code>CvFileNode* cvGetFileNodeByName(const CvFileStorage*, const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1614</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvFileNode cvGetFileNodeByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, java.lang.String name);
	/**
	 * Original signature : <code>int cvReadInt(const CvFileNode*, int)</code><br>
	 * <i>native declaration : cxcore.h:1618</i>
	 */
	int cvReadInt(fr.prima.jna.opencv.cxtypes.CvFileNode node, int default_value);
	/**
	 * Original signature : <code>int cvReadIntByName(const CvFileStorage*, const CvFileNode*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1626</i><br>
	 * @deprecated use the safer methods {@link #cvReadIntByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, java.lang.String, int)} and {@link #cvReadIntByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	int cvReadIntByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, com.sun.jna.Pointer name, int default_value);
	/**
	 * Original signature : <code>int cvReadIntByName(const CvFileStorage*, const CvFileNode*, const char*, int)</code><br>
	 * <i>native declaration : cxcore.h:1626</i>
	 */
	int cvReadIntByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, java.lang.String name, int default_value);
	/**
	 * Original signature : <code>double cvReadReal(const CvFileNode*, double)</code><br>
	 * <i>native declaration : cxcore.h:1633</i>
	 */
	double cvReadReal(fr.prima.jna.opencv.cxtypes.CvFileNode node, double default_value);
	/**
	 * Original signature : <code>double cvReadRealByName(const CvFileStorage*, const CvFileNode*, const char*, double)</code><br>
	 * <i>native declaration : cxcore.h:1641</i><br>
	 * @deprecated use the safer methods {@link #cvReadRealByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, java.lang.String, double)} and {@link #cvReadRealByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer, double)} instead
	 */
	@java.lang.Deprecated
	double cvReadRealByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, com.sun.jna.Pointer name, double default_value);
	/**
	 * Original signature : <code>double cvReadRealByName(const CvFileStorage*, const CvFileNode*, const char*, double)</code><br>
	 * <i>native declaration : cxcore.h:1641</i>
	 */
	double cvReadRealByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, java.lang.String name, double default_value);
	/**
	 * Original signature : <code>char* cvReadString(const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1648</i><br>
	 * @deprecated use the safer methods {@link #cvReadString(fr.prima.jna.opencv.cxtypes.CvFileNode, java.lang.String)} and {@link #cvReadString(fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	java.lang.String cvReadString(fr.prima.jna.opencv.cxtypes.CvFileNode node, com.sun.jna.Pointer default_value);
	/**
	 * Original signature : <code>char* cvReadString(const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1648</i>
	 */
	java.lang.String cvReadString(fr.prima.jna.opencv.cxtypes.CvFileNode node, java.lang.String default_value);
	/**
	 * Original signature : <code>char* cvReadStringByName(const CvFileStorage*, const CvFileNode*, const char*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1655</i><br>
	 * @deprecated use the safer methods {@link #cvReadStringByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, java.lang.String, java.lang.String)} and {@link #cvReadStringByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	java.lang.String cvReadStringByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, com.sun.jna.Pointer name, com.sun.jna.Pointer default_value);
	/**
	 * Original signature : <code>char* cvReadStringByName(const CvFileStorage*, const CvFileNode*, const char*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1655</i>
	 */
	java.lang.String cvReadStringByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, java.lang.String name, java.lang.String default_value);
	/**
	 * decodes standard or user-defined object and returns it<br>
	 * Original signature : <code>void* cvRead(CvFileStorage*, CvFileNode*, CvAttrList*)</code><br>
	 * <i>native declaration : cxcore.h:1663</i>
	 */
	com.sun.jna.Pointer cvRead(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode node, fr.prima.jna.opencv.cxtypes.CvAttrList attributes);
	/**
	 * Original signature : <code>void* cvReadByName(CvFileStorage*, const CvFileNode*, const char*, CvAttrList*)</code><br>
	 * <i>native declaration : cxcore.h:1667</i><br>
	 * @deprecated use the safer methods {@link #cvReadByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, java.lang.String, fr.prima.jna.opencv.cxtypes.CvAttrList)} and {@link #cvReadByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvAttrList)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer cvReadByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, com.sun.jna.Pointer name, fr.prima.jna.opencv.cxtypes.CvAttrList attributes);
	/**
	 * Original signature : <code>void* cvReadByName(CvFileStorage*, const CvFileNode*, const char*, CvAttrList*)</code><br>
	 * <i>native declaration : cxcore.h:1667</i>
	 */
	com.sun.jna.Pointer cvReadByName(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode map, java.lang.String name, fr.prima.jna.opencv.cxtypes.CvAttrList attributes);
	/**
	 * starts reading data from sequence or scalar numeric node<br>
	 * Original signature : <code>void cvStartReadRawData(const CvFileStorage*, const CvFileNode*, CvSeqReader*)</code><br>
	 * <i>native declaration : cxcore.h:1675</i>
	 */
	void cvStartReadRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode src, fr.prima.jna.opencv.cxtypes.CvSeqReader reader);
	/**
	 * reads multiple numbers and stores them to array<br>
	 * Original signature : <code>void cvReadRawDataSlice(const CvFileStorage*, CvSeqReader*, int, void*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1679</i><br>
	 * @deprecated use the safer methods {@link #cvReadRawDataSlice(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvSeqReader, int, com.sun.jna.Pointer, java.lang.String)} and {@link #cvReadRawDataSlice(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvSeqReader, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void cvReadRawDataSlice(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvSeqReader reader, int count, com.sun.jna.Pointer dst, com.sun.jna.Pointer dt);
	/**
	 * reads multiple numbers and stores them to array<br>
	 * Original signature : <code>void cvReadRawDataSlice(const CvFileStorage*, CvSeqReader*, int, void*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1679</i>
	 */
	void cvReadRawDataSlice(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvSeqReader reader, int count, com.sun.jna.Pointer dst, java.lang.String dt);
	/**
	 * combination of two previous functions for easier reading of whole sequences<br>
	 * Original signature : <code>void cvReadRawData(const CvFileStorage*, const CvFileNode*, void*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1683</i><br>
	 * @deprecated use the safer methods {@link #cvReadRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer, java.lang.String)} and {@link #cvReadRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, fr.prima.jna.opencv.cxtypes.CvFileNode, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void cvReadRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode src, com.sun.jna.Pointer dst, com.sun.jna.Pointer dt);
	/**
	 * combination of two previous functions for easier reading of whole sequences<br>
	 * Original signature : <code>void cvReadRawData(const CvFileStorage*, const CvFileNode*, void*, const char*)</code><br>
	 * <i>native declaration : cxcore.h:1683</i>
	 */
	void cvReadRawData(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, fr.prima.jna.opencv.cxtypes.CvFileNode src, com.sun.jna.Pointer dst, java.lang.String dt);
	/**
	 * writes a copy of file node to file storage<br>
	 * Original signature : <code>void cvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*, int)</code><br>
	 * <i>native declaration : cxcore.h:1687</i><br>
	 * @deprecated use the safer methods {@link #cvWriteFileNode(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, fr.prima.jna.opencv.cxtypes.CvFileNode, int)} and {@link #cvWriteFileNode(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvFileNode, int)} instead
	 */
	@java.lang.Deprecated
	void cvWriteFileNode(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, com.sun.jna.Pointer new_node_name, fr.prima.jna.opencv.cxtypes.CvFileNode node, int embed);
	/**
	 * writes a copy of file node to file storage<br>
	 * Original signature : <code>void cvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*, int)</code><br>
	 * <i>native declaration : cxcore.h:1687</i>
	 */
	void cvWriteFileNode(fr.prima.jna.opencv.cxcore.CxcoreLibrary.CvFileStorage fs, java.lang.String new_node_name, fr.prima.jna.opencv.cxtypes.CvFileNode node, int embed);
	/**
	 * returns name of file node<br>
	 * Original signature : <code>char* cvGetFileNodeName(const CvFileNode*)</code><br>
	 * <i>native declaration : cxcore.h:1691</i>
	 */
	java.lang.String cvGetFileNodeName(fr.prima.jna.opencv.cxtypes.CvFileNode node);
	/**
	 * Original signature : <code>void cvRegisterType(const CvTypeInfo*)</code><br>
	 * <i>native declaration : cxcore.h:1695</i>
	 */
	void cvRegisterType(fr.prima.jna.opencv.cxtypes.CvTypeInfo info);
	/**
	 * Original signature : <code>void cvUnregisterType(const char*)</code><br>
	 * <i>native declaration : cxcore.h:1696</i><br>
	 * @deprecated use the safer methods {@link #cvUnregisterType(java.lang.String)} and {@link #cvUnregisterType(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void cvUnregisterType(com.sun.jna.Pointer type_name);
	/**
	 * Original signature : <code>void cvUnregisterType(const char*)</code><br>
	 * <i>native declaration : cxcore.h:1696</i>
	 */
	void cvUnregisterType(java.lang.String type_name);
	/**
	 * Original signature : <code>CvTypeInfo* cvFirstType()</code><br>
	 * <i>native declaration : cxcore.h:1697</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvTypeInfo cvFirstType();
	/**
	 * Original signature : <code>CvTypeInfo* cvFindType(const char*)</code><br>
	 * <i>native declaration : cxcore.h:1698</i><br>
	 * @deprecated use the safer methods {@link #cvFindType(java.lang.String)} and {@link #cvFindType(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	fr.prima.jna.opencv.cxtypes.CvTypeInfo cvFindType(com.sun.jna.Pointer type_name);
	/**
	 * Original signature : <code>CvTypeInfo* cvFindType(const char*)</code><br>
	 * <i>native declaration : cxcore.h:1698</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvTypeInfo cvFindType(java.lang.String type_name);
	/**
	 * Original signature : <code>CvTypeInfo* cvTypeOf(const void*)</code><br>
	 * <i>native declaration : cxcore.h:1699</i>
	 */
	fr.prima.jna.opencv.cxtypes.CvTypeInfo cvTypeOf(com.sun.jna.Pointer struct_ptr);
	/**
	 * universal functions<br>
	 * Original signature : <code>void cvRelease(void**)</code><br>
	 * <i>native declaration : cxcore.h:1702</i>
	 */
	void cvRelease(com.sun.jna.ptr.PointerByReference struct_ptr);
	/**
	 * Original signature : <code>void* cvClone(const void*)</code><br>
	 * <i>native declaration : cxcore.h:1703</i>
	 */
	com.sun.jna.Pointer cvClone(com.sun.jna.Pointer struct_ptr);
	/**
	 * simple API for reading/writing data<br>
	 * Original signature : <code>void cvSave(const char*, const void*, const char*, const char*, CvAttrList)</code><br>
	 * <i>native declaration : cxcore.h:1706</i><br>
	 * @deprecated use the safer methods {@link #cvSave(java.lang.String, com.sun.jna.Pointer, java.lang.String, java.lang.String, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue)} and {@link #cvSave(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue)} instead
	 */
	@java.lang.Deprecated
	void cvSave(com.sun.jna.Pointer filename, com.sun.jna.Pointer struct_ptr, com.sun.jna.Pointer name, com.sun.jna.Pointer comment, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue attributes);
	/**
	 * simple API for reading/writing data<br>
	 * Original signature : <code>void cvSave(const char*, const void*, const char*, const char*, CvAttrList)</code><br>
	 * <i>native declaration : cxcore.h:1706</i>
	 */
	void cvSave(java.lang.String filename, com.sun.jna.Pointer struct_ptr, java.lang.String name, java.lang.String comment, fr.prima.jna.opencv.cxtypes.CvAttrList.ByValue attributes);
	/**
	 * Original signature : <code>void* cvLoad(const char*, CvMemStorage*, const char*, const char**)</code><br>
	 * <i>native declaration : cxcore.h:1710</i><br>
	 * @deprecated use the safer methods {@link #cvLoad(java.lang.String, fr.prima.jna.opencv.cxtypes.CvMemStorage, java.lang.String, java.lang.String[])} and {@link #cvLoad(com.sun.jna.Pointer, fr.prima.jna.opencv.cxtypes.CvMemStorage, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer cvLoad(com.sun.jna.Pointer filename, fr.prima.jna.opencv.cxtypes.CvMemStorage memstorage, com.sun.jna.Pointer name, com.sun.jna.ptr.PointerByReference real_name);
	/**
	 * Original signature : <code>void* cvLoad(const char*, CvMemStorage*, const char*, const char**)</code><br>
	 * <i>native declaration : cxcore.h:1710</i>
	 */
	com.sun.jna.Pointer cvLoad(java.lang.String filename, fr.prima.jna.opencv.cxtypes.CvMemStorage memstorage, java.lang.String name, java.lang.String real_name[]);
	/**
	 * helper functions for RNG initialization and accurate time measurement:<br>
	 * uses internal clock counter on x86<br>
	 * Original signature : <code>int64 cvGetTickCount()</code><br>
	 * <i>native declaration : cxcore.h:1719</i>
	 */
	long cvGetTickCount();
	/**
	 * Original signature : <code>double cvGetTickFrequency()</code><br>
	 * <i>native declaration : cxcore.h:1720</i>
	 */
	double cvGetTickFrequency();
	/**
	 * retrieve/set the number of threads used in OpenMP implementations<br>
	 * Original signature : <code>int cvGetNumThreads()</code><br>
	 * <i>native declaration : cxcore.h:1725</i>
	 */
	int cvGetNumThreads();
	/**
	 * Original signature : <code>void cvSetNumThreads(int)</code><br>
	 * <i>native declaration : cxcore.h:1726</i>
	 */
	void cvSetNumThreads(int threads);
	/**
	 * get index of the thread being executed<br>
	 * Original signature : <code>int cvGetThreadNum()</code><br>
	 * <i>native declaration : cxcore.h:1728</i>
	 */
	int cvGetThreadNum();
	/// Pointer to unknown (opaque) type
	public static class CvFileStorage extends com.sun.jna.PointerType {
		public CvFileStorage(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public CvFileStorage() {
			super();
		}
	}
}
