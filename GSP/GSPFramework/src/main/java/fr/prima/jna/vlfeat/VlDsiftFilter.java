package fr.prima.jna.vlfeat;
/**
 * <i>native declaration : /local_home/softs/sources/vlfeat/vl/dsift.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class VlDsiftFilter extends com.ochafik.lang.jnaerator.runtime.Structure<VlDsiftFilter, VlDsiftFilter.ByValue, VlDsiftFilter.ByReference> {
	/// < @internal @brief image width
	public int imWidth;
	/// < @internal @brief image height
	public int imHeight;
	/// < frame sampling step X
	public int stepX;
	/// < frame sampling step Y
	public int stepY;
	/// < frame bounding box min X
	public int boundMinX;
	/// < frame bounding box min Y
	public int boundMinY;
	/// < frame bounding box max X
	public int boundMaxX;
	/// < frame bounding box max Y
	public int boundMaxY;
	/**
	 * descriptor parameters<br>
	 * C type : VlDsiftDescriptorGeometry
	 */
	public fr.prima.jna.vlfeat.VlDsiftDescriptorGeometry geom;
	/// < flag: whether to drop the Gaussian window
	public int useFlatWindow;
	/// < number of sampled frames
	public int numFrames;
	/// < size of a descriptor
	public int descrSize;
	/**
	 * < frame buffer<br>
	 * C type : VlDsiftKeypoint*
	 */
	public fr.prima.jna.vlfeat.VlDsiftKeypoint.ByReference frames;
	/**
	 * < descriptor buffer<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference descrs;
	/// < buffer allocated: descriptor size
	public int numBinAlloc;
	/// < buffer allocated: number of frames
	public int numFrameAlloc;
	/// < buffer allocated: number of orientations
	public int numGradAlloc;
	/**
	 * < gradient buffer<br>
	 * C type : float**
	 */
	public com.sun.jna.ptr.PointerByReference grads;
	/**
	 * < temporary buffer<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference convTmp1;
	/**
	 * < temporary buffer<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference convTmp2;
	public VlDsiftFilter() {
		super();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected VlDsiftFilter newInstance() { return new VlDsiftFilter(); }
	public static VlDsiftFilter[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(VlDsiftFilter.class, arrayLength);
	}
	public static class ByReference extends VlDsiftFilter implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends VlDsiftFilter implements com.sun.jna.Structure.ByValue {}
}
