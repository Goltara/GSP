package fr.prima.jna.opencv.ml;
/**
 * JNA Wrapper for library <b>ml</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface MlLibrary extends com.sun.jna.Library {
	public static final java.lang.String JNA_LIBRARY_NAME = com.ochafik.lang.jnaerator.runtime.LibraryExtractor.getLibraryPath("ml", true, fr.prima.jna.opencv.ml.MlLibrary.class);
	public static final com.sun.jna.NativeLibrary JNA_NATIVE_LIB = com.sun.jna.NativeLibrary.getInstance(fr.prima.jna.opencv.ml.MlLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final fr.prima.jna.opencv.ml.MlLibrary INSTANCE = (fr.prima.jna.opencv.ml.MlLibrary)com.sun.jna.Native.loadLibrary(fr.prima.jna.opencv.ml.MlLibrary.JNA_LIBRARY_NAME, fr.prima.jna.opencv.ml.MlLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	/// <i>native declaration : ml.h</i>
	public static final double CV_LOG2PI = (1.8378770664093456);
	/// <i>native declaration : ml.h</i>
	public static final int CV_COL_SAMPLE = 0;
	/// <i>native declaration : ml.h</i>
	public static final int CV_ROW_SAMPLE = 1;
	/// <i>native declaration : ml.h</i>
	public static final int CV_VAR_NUMERICAL = 0;
	/// <i>native declaration : ml.h</i>
	public static final int CV_VAR_ORDERED = 0;
	/// <i>native declaration : ml.h</i>
	public static final int CV_VAR_CATEGORICAL = 1;
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_SVM = "opencv-ml-svm";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_KNN = "opencv-ml-knn";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_NBAYES = "opencv-ml-bayesian";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_EM = "opencv-ml-em";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_BOOSTING = "opencv-ml-boost-tree";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_TREE = "opencv-ml-tree";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_ANN_MLP = "opencv-ml-ann-mlp";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_CNN = "opencv-ml-cnn";
	/// <i>native declaration : ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_RTREES = "opencv-ml-random-trees";
	/// <i>native declaration : ml.h</i>
	public static final int CV_TS_CONCENTRIC_SPHERES = 0;
	/**
	 * <i>native declaration : ml.h:255</i><br>
	 * Conversion Error : Calc
	 */
	/**
	 * Original signature : <code>~CvSVMKernel()</code><br>
	 * <i>native declaration : ml.h:256</i>
	 */
	int CvSVMKernelDestructor();
	/**
	 * Original signature : <code>void clear()</code><br>
	 * <i>native declaration : ml.h:258</i>
	 */
	void clear();
	/**
	 * Original signature : <code>void calc(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:259</i><br>
	 * @deprecated use the safer methods {@link #calc(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc(int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@java.lang.Deprecated
	void calc(int vcount, int n, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:259</i>
	 */
	void calc(int vcount, int n, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_non_rbf_base(int, int, const float**, const float*, float*, double, double)</code><br>
	 * <i>native declaration : ml.h:264</i><br>
	 * @deprecated use the safer methods {@link #calc_non_rbf_base(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer, double, double)} and {@link #calc_non_rbf_base(int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, double, double)} instead
	 */
	@java.lang.Deprecated
	void calc_non_rbf_base(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results, double alpha, double beta);
	/**
	 * Original signature : <code>void calc_non_rbf_base(int, int, const float**, const float*, float*, double, double)</code><br>
	 * <i>native declaration : ml.h:264</i>
	 */
	void calc_non_rbf_base(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results, double alpha, double beta);
	/**
	 * Original signature : <code>void calc_linear(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:268</i><br>
	 * @deprecated use the safer methods {@link #calc_linear(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_linear(int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@java.lang.Deprecated
	void calc_linear(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_linear(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:268</i>
	 */
	void calc_linear(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_rbf(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:270</i><br>
	 * @deprecated use the safer methods {@link #calc_rbf(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_rbf(int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@java.lang.Deprecated
	void calc_rbf(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_rbf(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:270</i>
	 */
	void calc_rbf(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_poly(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:272</i><br>
	 * @deprecated use the safer methods {@link #calc_poly(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_poly(int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@java.lang.Deprecated
	void calc_poly(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_poly(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:272</i>
	 */
	void calc_poly(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_sigmoid(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:274</i><br>
	 * @deprecated use the safer methods {@link #calc_sigmoid(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_sigmoid(int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@java.lang.Deprecated
	void calc_sigmoid(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_sigmoid(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml.h:274</i>
	 */
	void calc_sigmoid(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
}
