package fr.prima.jna.opencv.cvaux;
/**
 * <i>native declaration : cvaux.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvEHMM extends com.ochafik.lang.jnaerator.runtime.Structure<CvEHMM, CvEHMM.ByValue, CvEHMM.ByReference> {
	/// 0 - lowest(i.e its states are real states), .....
	public int level;
	/// number of HMM states
	public int num_states;
	/**
	 * transition probab. matrices for states<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference transP;
	/**
	 * if level == 0 - array of brob matrices corresponding to hmm<br>
	 * if level == 1 - martix of matrices<br>
	 * C type : float**
	 */
	public com.sun.jna.ptr.PointerByReference obsProb;
	/// C type : u_union
	public u_union u;
	/// <i>native declaration : cvaux.h:134</i>
	public static class u_union extends com.ochafik.lang.jnaerator.runtime.Union<u_union, u_union.ByValue, u_union.ByReference> {
		/**
		 * if level == 0 points to real states array,<br>
		 * if not - points to embedded hmms<br>
		 * C type : CvEHMMState*
		 */
		public fr.prima.jna.opencv.cvaux.CvEHMMState.ByReference state;
		/**
		 * pointer to an embedded model or NULL, if it is a leaf<br>
		 * C type : CvEHMM*
		 */
		public fr.prima.jna.opencv.cvaux.CvEHMM.ByReference ehmm;
		public u_union() {
			super();
		}
		/**
		 * @param state if level == 0 points to real states array,<br>
		 * if not - points to embedded hmms<br>
		 * C type : CvEHMMState*
		 */
		public u_union(fr.prima.jna.opencv.cvaux.CvEHMMState.ByReference state) {
			super();
			this.state = state;
			setType(fr.prima.jna.opencv.cvaux.CvEHMMState.ByReference.class);
		}
		/**
		 * @param ehmm pointer to an embedded model or NULL, if it is a leaf<br>
		 * C type : CvEHMM*
		 */
		public u_union(fr.prima.jna.opencv.cvaux.CvEHMM.ByReference ehmm) {
			super();
			this.ehmm = ehmm;
			setType(fr.prima.jna.opencv.cvaux.CvEHMM.ByReference.class);
		}
		protected ByReference newByReference() { return new ByReference(); }
		protected ByValue newByValue() { return new ByValue(); }
		protected u_union newInstance() { return new u_union(); }
		public static u_union[] newArray(int arrayLength) {
			return com.ochafik.lang.jnaerator.runtime.Union.newArray(u_union.class, arrayLength);
		}
		public static class ByReference extends u_union implements com.sun.jna.Structure.ByReference {}
		public static class ByValue extends u_union implements com.sun.jna.Structure.ByValue {}
	}
	public CvEHMM() {
		super();
	}
	/**
	 * @param level 0 - lowest(i.e its states are real states), .....<br>
	 * @param num_states number of HMM states<br>
	 * @param transP transition probab. matrices for states<br>
	 * C type : float*<br>
	 * @param obsProb if level == 0 - array of brob matrices corresponding to hmm<br>
	 * if level == 1 - martix of matrices<br>
	 * C type : float**<br>
	 * @param u C type : u_union
	 */
	public CvEHMM(int level, int num_states, com.sun.jna.ptr.FloatByReference transP, com.sun.jna.ptr.PointerByReference obsProb, u_union u) {
		super();
		this.level = level;
		this.num_states = num_states;
		this.transP = transP;
		this.obsProb = obsProb;
		this.u = u;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected CvEHMM newInstance() { return new CvEHMM(); }
	public static CvEHMM[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(CvEHMM.class, arrayLength);
	}
	public static class ByReference extends CvEHMM implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends CvEHMM implements com.sun.jna.Structure.ByValue {}
}
