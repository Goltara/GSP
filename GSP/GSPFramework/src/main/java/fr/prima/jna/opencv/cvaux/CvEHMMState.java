package fr.prima.jna.opencv.cvaux;
/**
 * <i>native declaration : cvaux.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvEHMMState extends com.ochafik.lang.jnaerator.runtime.Structure<CvEHMMState, CvEHMMState.ByValue, CvEHMMState.ByReference> {
	/// number of mixtures in this state
	public int num_mix;
	/**
	 * mean vectors corresponding to each mixture<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference mu;
	/**
	 * square root of inversed variances corresp. to each mixture<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference inv_var;
	/**
	 * sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference log_var_val;
	/**
	 * array of mixture weights. Summ of all weights in state is 1.<br>
	 * C type : float*
	 */
	public com.sun.jna.ptr.FloatByReference weight;
	public CvEHMMState() {
		super();
	}
	/**
	 * @param num_mix number of mixtures in this state<br>
	 * @param mu mean vectors corresponding to each mixture<br>
	 * C type : float*<br>
	 * @param inv_var square root of inversed variances corresp. to each mixture<br>
	 * C type : float*<br>
	 * @param log_var_val sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n<br>
	 * C type : float*<br>
	 * @param weight array of mixture weights. Summ of all weights in state is 1.<br>
	 * C type : float*
	 */
	public CvEHMMState(int num_mix, com.sun.jna.ptr.FloatByReference mu, com.sun.jna.ptr.FloatByReference inv_var, com.sun.jna.ptr.FloatByReference log_var_val, com.sun.jna.ptr.FloatByReference weight) {
		super();
		this.num_mix = num_mix;
		this.mu = mu;
		this.inv_var = inv_var;
		this.log_var_val = log_var_val;
		this.weight = weight;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected CvEHMMState newInstance() { return new CvEHMMState(); }
	public static CvEHMMState[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(CvEHMMState.class, arrayLength);
	}
	public static class ByReference extends CvEHMMState implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends CvEHMMState implements com.sun.jna.Structure.ByValue {}
}
