package fr.prima.jna.vlfeat;
/**
 * @internal @brief MSER: basic region (declaration)<br>
 * *<br>
 * * Extremal regions and maximally stable extremal regions are<br>
 * * instances of image regions.<br>
 * *<br>
 * * There is an image region for each pixel of the image. Each region<br>
 * * is represented by an instance of this structure.  Regions are<br>
 * * stored into an array in pixel order.<br>
 * *<br>
 * * Regions are arranged into a forest. VlMserReg::parent points to<br>
 * * the parent node, or to the node itself if the node is a root.<br>
 * * VlMserReg::parent is the index of the node in the node array<br>
 * * (which therefore is also the index of the corresponding<br>
 * * pixel). VlMserReg::height is the distance of the fartest leaf. If<br>
 * * the node itself is a leaf, then VlMserReg::height is zero.<br>
 * *<br>
 * * VlMserReg::area is the area of the image region corresponding to<br>
 * * this node.<br>
 * *<br>
 * * VlMserReg::region is the extremal region identifier. Not all<br>
 * * regions are extremal regions however; if the region is NOT<br>
 * * extremal, this field is set to ....<br>
 * <i>native declaration : /local_home/softs/sources/vlfeat/vl/mser.h:147</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class VlMserReg extends com.ochafik.lang.jnaerator.runtime.Structure<VlMserReg, VlMserReg.ByValue, VlMserReg.ByReference> {
	/**
	 * < points to the parent region.<br>
	 * C type : vl_uint
	 */
	public int parent;
	/**
	 * < points to a region closer to a root.<br>
	 * C type : vl_uint
	 */
	public int shortcut;
	/**
	 * < region height in the forest.<br>
	 * C type : vl_uint
	 */
	public int height;
	/**
	 * < area of the region.<br>
	 * C type : vl_uint
	 */
	public int area;
	public VlMserReg() {
		super();
	}
	/**
	 * @param parent < points to the parent region.<br>
	 * C type : vl_uint<br>
	 * @param shortcut < points to a region closer to a root.<br>
	 * C type : vl_uint<br>
	 * @param height < region height in the forest.<br>
	 * C type : vl_uint<br>
	 * @param area < area of the region.<br>
	 * C type : vl_uint
	 */
	public VlMserReg(int parent, int shortcut, int height, int area) {
		super();
		this.parent = parent;
		this.shortcut = shortcut;
		this.height = height;
		this.area = area;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected VlMserReg newInstance() { return new VlMserReg(); }
	public static VlMserReg[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(VlMserReg.class, arrayLength);
	}
	public static class ByReference extends VlMserReg implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends VlMserReg implements com.sun.jna.Structure.ByValue {}
}
