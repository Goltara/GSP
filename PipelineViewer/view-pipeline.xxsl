<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet 
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     xmlns:xs="http://www.w3.org/2001/XMLSchema"
     xmlns:xx="http://gnayacc.info/xslt/xxsl"
     version="2.0">
    <xsl:output method="text"/>
    <!--
        preprocessing generates all-split elements:
        e.g. <c fromModule="root" fromPort="image" toModule="diff" toPort="input"/>)
      -->
    <xx:xxsl>

"/" {
        .text "digraph Pipeline {\n";
         .text "rankdir=LR;\n";
         .text "node [color = black, shape = egg];\n";

         xsl:message {.text "=== Doing preprocessing ==="};
         .var preProcessed = {.apply "//m | //module | //c | //connector"}

         xsl:message {.text "=== Doing generation ==="};
         xsl:message {.eval "$preProcessed"};
         .for "$preProcessed/m"
              {
                  .text "subgraph \"cluster_" .eval "@id" .text "\" {\n";
                  .text "\"node_" .eval "@id".text "\" [label=\"" .eval "@id".text " [" .eval "@type" .text "]\", style = filled, fillcolor = palegreen, shape = component] ;\n";
                  .var m = ".";
                  .for "$preProcessed/c"
                       {
                           .if "$m/@id = @fromModule" {
                                   .text "\"" .eval "@fromModule" .text "@" .eval "@fromPort" .text "\" [label=\"" .eval "@fromPort" .text "\", style = filled, fillcolor = slategray2];\n";
                               }
                           .if "$m/@id = @toModule" {
                                   .text "\"" .eval "@toModule" .text "@" .eval "@toPort" .text "\" [label=\"" .eval "@toPort" .text "\", style = filled, fillcolor = plum];\n";
                               }
                       }
                  .text "}\n";
              }
         .for "$preProcessed/c"
              {
                  .text "\"" .eval "@fromModule" .text "@" .eval "@fromPort" .text "\" -> \"" .eval "@toModule" .text "@" .eval "@toPort".text "\" ;\n"
              }
         .text "}\n";
     }

"m | module" {m {xsl:copy-of select="@*"{}}}

.define preprocess-chain chain="@chain" {
    .var elements = "tokenize(@chain, '\\s*-\\s*')"
    .var doc = "/";
    .for "$elements" {
        .var i = "position()";
        .var last = "last()";
        .var addIO = {
            .var split = "tokenize(., '#')";
            .when "$i=1" {.eval "if (count($split)=1) then concat('#',.,'#') else concat('#',.)"}
            .when "$i=$last" {.eval "if (count($split)=1) then concat('#',.,'#') else concat(.,'#')"}
            .otherwise {.eval "if (count($split)=1) then concat('#',.,'#') else ."}
        }
        .var parts = "tokenize($addIO, '1')";
            xsl:message {.eval "$parts[2]"}
        .for "$doc//m[@special='factory' and @id=$parts[2]]" {
            .var id = "generate-id(.)";
            m m___label="$parts[2]" {
                xsl:copy-of select="@*" {}
                xsl:attribute name="id" select="$id" {}
            }
            e {.eval "string-join((parts[1], $i, parts[2]), '#')"}
        }
        .if "count($doc//m[@special='factory' and @id=$parts[2]]) = 0" {e {.eval "$addIO"}}
    }
}

"c|connector" {
    .when "@chain" {
        .var c = {.call preprocess-chain};
        xsl:copy-of select="$c/./m" {}
        .var elements = "($c/./e/text())";
        .for "$elements[position() != last()]"
             {
                 xsl:message {.text "E: " .eval "."}
                 .var i = "position()";
                 .var last = "last()";
                 .var e1 = ".";
                 .var e2 = "$elements[1+$i]";
                 
                 .var from = "tokenize(if ($i = 1) then concat('#',$e1) else $e1, '#')[position() > 1]";
                 .var to = "reverse(tokenize($e2, '#')[position() = (1,2)])";
                 .var fromModule = "if (count($from)=2) then $from[1] else $e1";
                 .var toModule = "if (count($to)=2) then $to[1] else $e2";
                 .var fromPort = "if (count($from)=2 and not($from[2]='')) then $from[2] else 'output'";
                 .var toPort = "if (count($to[2])=2 and not($to[2]='')) then $to[2] else 'input'";
                 c fromModule="{$fromModule}" fromPort="{$fromPort}" toModule="{$toModule}" toPort="{$toPort}" {}
             }
    }
    .otherwise {
        xsl:message {.text "ERR: found a " .eval "local-name()" .text " without chain attribute"};
    }
}
    </xx:xxsl>
</xsl:stylesheet>
